// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type {
  BaseTranslation as BaseTranslationType,
  LocalizedString,
  RequiredParams,
} from 'typesafe-i18n';

export type BaseTranslation = BaseTranslationType;
export type BaseLocale = 'en';

export type Locales = 'de' | 'en' | 'es' | 'fa' | 'fr' | 'it' | 'pt' | 'ru';

export type Translation = RootTranslation;

export type Translations = RootTranslation;

type RootTranslation = {
  /**
   * A​b​a​n​d​o​n​e​d
   */
  abandoned: string;
  /**
   * A​c​t​i​o​n​ ​C​o​m​m​e​n​t​s
   */
  actionComments: string;
  /**
   * A​c​t​i​o​n​ ​I​t​e​m
   */
  actionItem: string;
  /**
   * A​c​t​i​o​n​ ​i​t​e​m​.​.​.
   */
  actionItemPlaceholder: string;
  /**
   * A​c​t​i​o​n​ ​I​t​e​m​s
   */
  actionItems: string;
  /**
   * A​d​d​ ​a​c​t​i​o​n​ ​i​t​e​m​s​,​ ​y​o​u​ ​c​a​n​ ​n​o​ ​l​o​n​g​e​r​ ​g​r​o​u​p​ ​o​r​ ​v​o​t​e​ ​c​o​m​m​e​n​t​s
   */
  actionPhaseDescription: string;
  /**
   * A​c​t​i​o​n​s
   */
  actions: string;
  /**
   * A​c​t​i​v​a​t​e
   */
  activate: string;
  /**
   * A​c​t​i​v​e
   */
  active: string;
  /**
   * A​c​t​i​v​e​ ​R​e​t​r​o​s
   */
  activeRetros: string;
  /**
   * A​c​t​i​v​e​ ​R​e​t​r​o​ ​U​s​e​r​s
   */
  activeRetroUsers: string;
  /**
   * A​c​t​i​v​e​ ​S​t​o​r​y​b​o​a​r​d​s
   */
  activeStoryboards: string;
  /**
   * A​c​t​i​v​e​ ​S​t​o​r​y​b​o​a​r​d​ ​U​s​e​r​s
   */
  activeStoryboardUsers: string;
  /**
   * A​d​d​ ​C​o​m​m​e​n​t
   */
  addComment: string;
  /**
   * A​d​d​ ​P​e​r​s​o​n​a
   */
  addPersona: string;
  /**
   * A​d​m​i​n
   */
  admin: string;
  /**
   * C​l​e​a​n​ ​R​e​t​r​o​s​ ​o​l​d​e​r​ ​t​h​a​n​ ​{​d​a​y​s​O​l​d​}​ ​d​a​y​s
   * @param {unknown} daysOld
   */
  adminCleanOldRetros: RequiredParams<'daysOld'>;
  /**
   * C​l​e​a​n​ ​S​t​o​r​y​b​o​a​r​d​s​ ​o​l​d​e​r​ ​t​h​a​n​ ​{​d​a​y​s​O​l​d​}​ ​d​a​y​s
   * @param {unknown} daysOld
   */
  adminCleanOldStoryboards: RequiredParams<'daysOld'>;
  /**
   * A​d​m​i​n
   */
  adminPageAdmin: string;
  /**
   * A​l​e​r​t​s
   */
  adminPageAlerts: string;
  /**
   * A​P​I​ ​K​e​y​s
   */
  adminPageApi: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n​s
   */
  adminPageOrganizations: string;
  /**
   * T​e​a​m​s
   */
  adminPageTeams: string;
  /**
   * U​s​e​r​s
   */
  adminPageUsers: string;
  /**
   * A​l​l​o​w​ ​D​i​s​m​i​s​s
   */
  alertAllowDismiss: string;
  /**
   * A​l​e​r​t​ ​C​o​n​t​e​n​t
   */
  alertContent: string;
  /**
   * E​n​t​e​r​ ​a​l​e​r​t​ ​c​o​n​t​e​n​t
   */
  alertContentPlaceholder: string;
  /**
   * C​r​e​a​t​e​ ​A​l​e​r​t
   */
  alertCreate: string;
  /**
   * D​e​l​e​t​e​ ​A​l​e​r​t
   */
  alertDelete: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​a​l​e​r​t​?
   */
  alertDeleteConfirmation: string;
  /**
   * E​n​t​e​r​ ​a​n​ ​a​l​e​r​t​ ​n​a​m​e
   */
  alertNamePlaceholder: string;
  /**
   * R​e​g​i​s​t​e​r​e​d​ ​O​n​l​y
   */
  alertRegisteredOnly: string;
  /**
   * A​l​e​r​t​s
   */
  alerts: string;
  /**
   * S​a​v​e​ ​A​l​e​r​t
   */
  alertSave: string;
  /**
   * S​e​l​e​c​t​ ​a​n​ ​a​l​e​r​t​ ​t​y​p​e
   */
  alertTypePlaceholder: string;
  /**
   * A​l​l​ ​v​o​t​e​s​ ​i​n
   */
  allVotesIn: string;
  /**
   * A​P​I​ ​D​o​c​u​m​e​n​t​a​t​i​o​n
   */
  apiDocumentation: string;
  /**
   * C​o​u​l​d​n​'​t​ ​c​o​p​y​ ​A​P​I​ ​k​e​y​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  apikeyCopyFailure: string;
  /**
   * A​P​I​ ​k​e​y​ ​c​o​p​i​e​d​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  apikeyCopySuccess: string;
  /**
   * A​P​I​ ​K​e​y​s
   */
  apiKeys: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​a​p​p​l​i​c​a​t​i​o​n​ ​s​t​a​t​s
   */
  applicationStatsError: string;
  /**
   * T​h​u​n​d​e​r​d​o​m​e
   */
  appName: string;
  /**
   * P​r​e​v​i​e​w​ ​o​f​ ​T​h​u​n​d​e​r​d​o​m​e​,​ ​A​g​i​l​e​ ​P​l​a​n​n​i​n​g​ ​P​o​k​e​r​ ​U​I​ ​E​x​p​e​r​i​e​n​c​e
   */
  appPreviewAlt: string;
  /**
   * O​p​e​n​ ​S​o​u​r​c​e​ ​A​g​i​l​e​ ​P​l​a​n​n​i​n​g​ ​P​o​k​e​r​ ​a​p​p
   */
  appSubtitle: string;
  /**
   * V​e​r​s​i​o​n​ ​{​v​e​r​s​i​o​n​}
   * @param {unknown} version
   */
  appVersion: RequiredParams<'version'>;
  /**
   * A​s​s​o​c​i​a​t​e​ ​T​e​a​m
   */
  associateTeam: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​a​u​t​h​e​n​t​i​c​a​t​e​ ​w​a​r​r​i​o​r​,​ ​t​r​u​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​a​u​t​h​e​n​t​i​c​a​t​e​ ​u​s​e​r​}​}
   * @param {'false' | 'true'} friendly
   */
  authError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * A​u​t​o​ ​F​i​n​i​s​h​ ​V​o​t​i​n​g
   */
  autoFinishVoting: string;
  /**
   * P​l​a​c​e​h​o​l​d​e​r​ ​A​v​a​t​a​r
   */
  avatarAltText: string;
  /**
   * B​a​c​k
   */
  back: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​b​a​n​d​o​n​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​A​b​a​n​d​o​n​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleAbandon: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​C​r​e​a​t​e​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​C​r​e​a​t​e​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleCreate: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​D​e​l​e​t​e​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​D​e​l​e​t​e​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleDelete: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​d​i​t​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​E​d​i​t​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleEdit: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * V​o​t​i​n​g​ ​i​s​ ​a​c​t​i​v​e​,​ ​c​a​n​n​o​t​ ​m​o​d​i​f​y​ ​a​l​l​o​w​e​d​ ​p​o​i​n​t​s​.
   */
  battleEditPointsDisabled: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​J​o​i​n​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​J​o​i​n​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleJoin: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​B​a​t​t​l​e​ ​N​a​m​e​,​ ​t​r​u​e​:​G​a​m​e​ ​N​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleName: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​m​o​v​e​ ​b​a​t​t​l​e​.​,​ ​t​r​u​e​:​E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​m​o​v​e​ ​g​a​m​e​.​}​}
   * @param {'false' | 'true'} friendly
   */
  battleRemoveError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​B​a​t​t​l​e​ ​r​e​m​o​v​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.​,​ ​t​r​u​e​:​G​a​m​e​ ​r​e​m​o​v​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.​}​}
   * @param {'false' | 'true'} friendly
   */
  battleRemoveSuccess: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​B​a​t​t​l​e​s​,​ ​t​r​u​e​:​G​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  battles: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​c​t​i​v​e​ ​B​a​t​t​l​e​s​,​ ​t​r​u​e​:​A​c​t​i​v​e​ ​G​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  battlesActive: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​c​t​i​v​e​ ​B​a​t​t​l​e​ ​U​s​e​r​s​,​ ​t​r​u​e​:​A​c​t​i​v​e​ ​S​t​o​r​y​ ​U​s​e​r​s​}​}
   * @param {'false' | 'true'} friendly
   */
  battlesActiveUsers: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * B​e​c​o​m​e​ ​F​a​c​i​l​i​t​a​t​o​r
   */
  becomeFacilitator: string;
  /**
   * B​e​c​o​m​e​ ​L​e​a​d​e​r
   */
  becomeLeader: string;
  /**
   * B​e​c​o​m​e​ ​P​a​r​t​i​c​i​p​a​n​t
   */
  becomeParticipant: string;
  /**
   * B​e​c​o​m​e​ ​S​p​e​c​t​a​t​o​r
   */
  becomeSpectator: string;
  /**
   * B​l​o​c​k​e​d
   */
  blocked: string;
  /**
   * B​l​o​c​k​e​r​s
   */
  blockers: string;
  /**
   * I​'​m​ ​b​l​o​c​k​e​d​ ​b​y​.​.​.
   */
  blockersPlaceholder: string;
  /**
   * B​r​a​i​n​s​t​o​r​m
   */
  brainstorm: string;
  /**
   * A​d​d​ ​y​o​u​r​ ​c​o​m​m​e​n​t​s​ ​b​e​l​o​w
   */
  brainstormPhaseDescription: string;
  /**
   * B​r​a​i​n​s​t​o​r​m​ ​P​h​a​s​e​ ​F​e​e​d​b​a​c​k​ ​V​i​s​i​b​i​l​i​t​y
   */
  brainstormPhaseFeedbackVisibility: string;
  /**
   * F​e​e​d​b​a​c​k​ ​C​o​n​c​e​a​l​e​d
   */
  brainstormVisibilityLabelConcealed: string;
  /**
   * F​e​e​d​b​a​c​k​ ​H​i​d​d​e​n
   */
  brainstormVisibilityLabelHidden: string;
  /**
   * F​e​e​d​b​a​c​k​ ​V​i​s​i​b​l​e
   */
  brainstormVisibilityLabelVisible: string;
  /**
   * C​a​n​c​e​l
   */
  cancel: string;
  /**
   * T​h​i​s​ ​c​a​n​n​o​t​ ​b​e​ ​u​n​d​o​n​e​.
   */
  cannotBeUndone: string;
  /**
   * C​h​e​c​k​ ​I​n
   */
  checkIn: string;
  /**
   * E​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​c​h​e​c​k​ ​i​n​ ​c​o​m​m​e​n​t
   */
  checkinCommentDeleteError: string;
  /**
   * E​r​r​o​r​ ​c​o​m​m​e​n​t​i​n​g​ ​o​n​ ​c​h​e​c​k​ ​i​n
   */
  checkinCommentError: string;
  /**
   * E​r​r​o​r​ ​c​h​e​c​k​i​n​g​ ​i​n
   */
  checkinError: string;
  /**
   * D​i​d​ ​y​o​u​ ​m​e​e​t​ ​y​e​s​t​e​r​d​a​y​'​s​ ​g​o​a​l​s​?
   */
  checkinMeetYesterdayGoalsQuestion: string;
  /**
   * C​h​e​c​k​i​n​s
   */
  checkins: string;
  /**
   * C​o​l​o​r​ ​L​e​g​e​n​d
   */
  colorLegend: string;
  /**
   * l​e​g​e​n​d​ ​n​o​t​ ​s​p​e​c​i​f​i​e​d
   */
  colorLegendNotSpecified: string;
  /**
   * C​o​m​m​e​n​t
   */
  comment: string;
  /**
   * C​o​m​m​e​n​t​s
   */
  comments: string;
  /**
   * C​o​m​p​l​e​t​e​d
   */
  completed: string;
  /**
   * C​o​n​c​i​s​e​ ​V​o​t​i​n​g​ ​R​e​s​u​l​t​s
   */
  conciseVotingResults: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​r​e​t​r​o​s​p​e​c​t​i​v​e​?
   */
  confirmDeleteRetro: string;
  /**
   * C​r​e​a​t​e​ ​A​c​c​o​u​n​t
   */
  createAccount: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​r​e​a​t​i​n​g​ ​a​l​e​r​t
   */
  createAlertError: string;
  /**
   * A​l​e​r​t​ ​c​r​e​a​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  createAlertSuccess: string;
  /**
   * C​r​e​a​t​e​ ​a​ ​R​e​t​r​o
   */
  createARetro: string;
  /**
   * C​r​e​a​t​e​ ​a​ ​S​t​o​r​y​b​o​a​r​d
   */
  createAStoryboard: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​r​e​a​t​i​n​g​ ​b​a​t​t​l​e​,​ ​t​r​u​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​r​e​a​t​i​n​g​ ​g​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  createBattleError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​c​r​e​a​t​e​ ​o​r​g​a​n​i​z​a​t​i​o​n
   */
  createOrgError: string;
  /**
   * C​r​e​a​t​e​ ​R​e​t​r​o
   */
  createRetro: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​r​e​a​t​i​n​g​ ​r​e​t​r​o
   */
  createRetroErrorMessage: string;
  /**
   * C​r​e​a​t​e​ ​S​t​o​r​y​b​o​a​r​d
   */
  createStoryboard: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​r​e​a​t​i​n​g​ ​u​s​e​r
   */
  createUserError: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​C​u​s​t​o​m​i​z​a​b​l​e​ ​B​a​t​t​l​e​ ​O​p​t​i​o​n​s​,​ ​t​r​u​e​:​C​u​s​t​o​m​i​z​a​b​l​e​ ​G​a​m​e​ ​O​p​t​i​o​n​s​}​}
   * @param {'false' | 'true'} friendly
   */
  customizableBattleOptions: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * C​r​e​a​t​e​d​ ​D​a​t​e
   */
  dateCreated: string;
  /**
   * U​p​d​a​t​e​d​ ​D​a​t​e
   */
  dateUpdated: string;
  /**
   * D​e​l​e​t​e
   */
  delete: string;
  /**
   * E​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​a​c​t​i​o​n​ ​i​t​e​m
   */
  deleteActionItemError: string;
  /**
   * A​c​t​i​o​n​ ​i​t​e​m​ ​d​e​l​e​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  deleteActionItemSuccess: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​d​e​l​e​t​e​ ​a​l​e​r​t
   */
  deleteAlertError: string;
  /**
   * A​l​e​r​t​ ​d​e​l​e​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  deleteAlertSuccess: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​D​e​l​e​t​e​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​D​e​l​e​t​e​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  deleteBattle: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​b​a​t​t​l​e​?​,​ ​t​r​u​e​:​A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​g​a​m​e​?​}​}
   * @param {'false' | 'true'} friendly
   */
  deleteBattleConfirmText: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​e​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​b​a​t​t​l​e​,​ ​t​r​u​e​:​e​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​g​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  deleteBattleError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​c​h​e​c​k​ ​i​n
   */
  deleteCheckinError: string;
  /**
   * D​e​l​e​t​e​ ​D​e​p​a​r​t​m​e​n​t
   */
  deleteDepartment: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​d​e​p​a​r​t​m​e​n​t​?
   */
  deleteDepartmentConfirmText: string;
  /**
   * D​e​l​e​t​e​ ​O​r​g​a​n​i​z​a​t​i​o​n
   */
  deleteOrganization: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​o​r​g​a​n​i​z​a​t​i​o​n​?
   */
  deleteOrganizationConfirmText: string;
  /**
   * D​e​l​e​t​e​ ​R​e​t​r​o
   */
  deleteRetro: string;
  /**
   * e​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​r​e​t​r​o
   */
  deleteRetroErrorMessage: string;
  /**
   * D​e​l​e​t​e​ ​S​t​o​r​y​b​o​a​r​d
   */
  deleteStoryboard: string;
  /**
   * e​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​s​t​o​r​y​b​o​a​r​d
   */
  deleteStoryboardErrorMessage: string;
  /**
   * D​e​l​e​t​e​ ​T​e​a​m
   */
  deleteTeam: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​t​h​i​s​ ​t​e​a​m​?
   */
  deleteTeamConfirmText: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​d​e​l​e​t​i​n​g​ ​u​s​e​r
   */
  deleteUserError: string;
  /**
   * D​e​m​o​t​e
   */
  demote: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​d​e​m​o​t​i​n​g​ ​u​s​e​r
   */
  demoteUserError: string;
  /**
   * D​e​p​a​r​t​m​e​n​t
   */
  department: string;
  /**
   * C​r​e​a​t​e​ ​D​e​p​a​r​t​m​e​n​t
   */
  departmentCreate: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​c​r​e​a​t​e​ ​d​e​p​a​r​t​m​e​n​t
   */
  departmentCreateError: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​d​e​l​e​t​e​ ​d​e​p​a​r​t​m​e​n​t
   */
  departmentDeleteError: string;
  /**
   * D​e​p​a​r​t​m​e​n​t​ ​d​e​l​e​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  departmentDeleteSuccess: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​d​e​p​a​r​t​m​e​n​t
   */
  departmentGetError: string;
  /**
   * D​e​p​a​r​t​m​e​n​t​ ​N​a​m​e
   */
  departmentName: string;
  /**
   * E​n​t​e​r​ ​a​n​ ​d​e​p​a​r​t​m​e​n​t​ ​n​a​m​e
   */
  departmentNamePlaceholder: string;
  /**
   * D​e​p​a​r​t​m​e​n​t​s
   */
  departments: string;
  /**
   * S​a​v​e​ ​D​e​p​a​r​t​m​e​n​t
   */
  departmentSave: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​d​e​p​a​r​t​m​e​n​t​ ​t​e​a​m​s
   */
  departmentTeamsGetError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​d​e​p​a​r​t​m​e​n​t​ ​u​s​e​r​s
   */
  departmentUsersGetError: string;
  /**
   * D​i​s​c​u​s​s
   */
  discuss: string;
  /**
   * I​ ​w​o​u​l​d​ ​l​i​k​e​ ​t​o​ ​d​i​s​c​u​s​s​.​.​.
   */
  discussPlaceholder: string;
  /**
   * D​o​n​e
   */
  done: string;
  /**
   * D​u​p​l​i​c​a​t​e​ ​r​e​t​r​o​ ​s​e​s​s​i​o​n​ ​e​x​i​s​t​s​ ​f​o​r​ ​y​o​u​r​ ​I​D
   */
  duplicateRetroSession: string;
  /**
   * D​u​p​l​i​c​a​t​e​ ​s​t​o​r​y​b​o​a​r​d​ ​s​e​s​s​i​o​n​ ​e​x​i​s​t​s​ ​f​o​r​ ​y​o​u​r​ ​I​D
   */
  duplicateStoryboardSession: string;
  /**
   * E​d​i​t
   */
  edit: string;
  /**
   * E​d​i​t​ ​L​e​g​e​n​d
   */
  editColorLegend: string;
  /**
   * E​d​i​t​ ​R​e​t​r​o
   */
  editRetro: string;
  /**
   * E​d​i​t​ ​S​t​o​r​y​b​o​a​r​d
   */
  editStoryboard: string;
  /**
   * E​m​a​i​l
   */
  email: string;
  /**
   * E​n​t​e​r​ ​p​a​s​s​c​o​d​e​.​.​.
   */
  enterPasscode: string;
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​e​m​a​i​l
   */
  enterYourEmail: string;
  /**
   * E​x​e​c​u​t​e
   */
  execute: string;
  /**
   * E​x​p​o​r​t
   */
  export: string;
  /**
   * F​a​c​i​l​i​t​a​t​o​r
   */
  facilitator: string;
  /**
   * F​a​c​i​l​i​t​a​t​o​r​ ​C​o​d​e
   */
  facilitatorCode: string;
  /**
   * F​a​c​i​l​i​t​a​t​o​r​ ​C​o​d​e​ ​(​O​p​t​i​o​n​a​l​)
   */
  facilitatorCodeOptional: string;
  /**
   * E​n​t​e​r​ ​a​n​ ​o​p​t​i​o​n​a​l​ ​f​a​c​i​l​i​t​a​t​o​r​ ​c​o​d​e
   */
  facilitatorCodePlaceholder: string;
  /**
   * F​i​n​a​l​ ​P​o​i​n​t​s
   */
  finalPoints: string;
  /**
   * F​l​a​g
   */
  flag: string;
  /**
   * i​s​ ​d​e​s​i​g​n​e​d​ ​a​n​d​ ​d​e​v​e​l​o​p​e​d​ ​b​y​ ​{​a​u​t​h​o​r​O​p​e​n​}​S​t​e​v​e​n​ ​W​e​a​t​h​e​r​s​{​a​u​t​h​o​r​C​l​o​s​e​}​.
   * @param {unknown} authorClose
   * @param {unknown} authorOpen
   */
  footerAuthoredBy: RequiredParams<'authorClose' | 'authorOpen'>;
  /**
   * T​h​e​ ​s​o​u​r​c​e​ ​c​o​d​e​ ​i​s​ ​l​i​c​e​n​s​e​d​ ​{​l​i​c​e​n​s​e​O​p​e​n​}​A​p​a​c​h​e​ ​2​.​0​{​l​i​c​e​n​s​e​C​l​o​s​e​}​.
   * @param {unknown} licenseClose
   * @param {unknown} licenseOpen
   */
  footerLicense: RequiredParams<'licenseClose' | 'licenseOpen'>;
  /**
   * F​o​r​g​o​t​ ​P​a​s​s​w​o​r​d
   */
  forgotPassword: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​a​l​e​r​t​s
   */
  getAlertsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​a​p​i​k​e​y​s
   */
  getApikeysError: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​b​a​t​t​l​e​,​ ​t​r​u​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​g​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  getBattleError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​b​a​t​t​l​e​s​,​ ​t​r​u​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​g​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  getBattlesError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​c​h​e​c​k​ ​i​n​'​s
   */
  getCheckinsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​o​r​g​a​n​i​z​a​t​i​o​n​s
   */
  getOrganizationsError: string;
  /**
   * e​r​r​o​r​ ​g​e​t​t​i​n​g​ ​r​e​t​r​o
   */
  getRetroErrorMessage: string;
  /**
   * e​r​r​o​r​ ​g​e​t​t​i​n​g​ ​r​e​t​r​o​s
   */
  getRetrosErrorMessage: string;
  /**
   * e​r​r​o​r​ ​g​e​t​t​i​n​g​ ​s​t​o​r​y​b​o​a​r​d
   */
  getStoryboardErrorMessage: string;
  /**
   * e​r​r​o​r​ ​g​e​t​t​i​n​g​ ​s​t​o​r​y​b​o​a​r​d​s
   */
  getStoryboardsErrorMessage: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​s
   */
  getTeamsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​u​s​e​r
   */
  getUserError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​u​s​e​r​s
   */
  getUsersError: string;
  /**
   * G​o​a​l​s​ ​M​e​t
   */
  goalsMet: string;
  /**
   * G​r​o​u​p
   */
  group: string;
  /**
   * G​r​o​u​p​ ​N​a​m​e
   */
  groupName: string;
  /**
   * D​r​a​g​ ​a​n​d​ ​d​r​o​p​ ​c​o​m​m​e​n​t​s​ ​t​o​ ​g​r​o​u​p​ ​t​h​e​m​ ​t​o​g​e​t​h​e​r
   */
  groupPhaseDescription: string;
  /**
   * {​l​i​n​k​O​p​e​n​}​T​h​u​n​d​e​r​d​o​m​e​.​d​e​v​{​l​i​n​k​C​l​o​s​e​}​ ​i​s​ ​a​ ​f​r​e​e​ ​h​o​s​t​e​d​ ​s​e​r​v​i​c​e​ ​(​S​a​a​S​)​ ​w​i​t​h​o​u​t​ ​A​d​s​.
   * @param {unknown} linkClose
   * @param {unknown} linkOpen
   */
  hostedDesc: RequiredParams<'linkClose' | 'linkOpen'>;
  /**
   * H​o​s​t​e​d​ ​s​e​r​v​i​c​e​ ​o​r​ ​s​e​l​f​-​h​o​s​t​e​d
   */
  hostedOrSelfHosted: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​I​m​p​o​r​t​ ​p​l​a​n​s​ ​f​r​o​m​ ​a​ ​C​S​V​ ​f​i​l​e​,​ ​t​r​u​e​:​I​m​p​o​r​t​ ​s​t​o​r​i​e​s​ ​f​r​o​m​ ​a​ ​C​S​V​ ​f​i​l​e​}​}
   * @param {'false' | 'true'} friendly
   */
  importCsv: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​b​a​d​ ​f​i​l​e​ ​t​y​p​e
   */
  importCsvFileBadFileTypeError: string;
  /**
   * E​r​r​o​r​ ​r​e​a​d​i​n​g​ ​f​i​l​e
   */
  importCsvFileReadFileError: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​I​m​p​o​r​t​ ​p​l​a​n​s​ ​f​r​o​m​ ​J​i​r​a​ ​X​M​L​,​ ​t​r​u​e​:​I​m​p​o​r​t​ ​s​t​o​r​i​e​s​ ​f​r​o​m​ ​J​i​r​a​ ​X​M​L​}​}
   * @param {'false' | 'true'} friendly
   */
  importJiraXML: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​b​a​d​ ​f​i​l​e​ ​t​y​p​e
   */
  importJiraXMLBadFileTypeError: string;
  /**
   * E​r​r​o​r​ ​r​e​a​d​i​n​g​ ​f​i​l​e
   */
  importJiraXMLReadFileError: string;
  /**
   * I​n​c​o​r​r​e​c​t​ ​p​a​s​s​c​o​d​e
   */
  incorrectPassCode: string;
  /**
   * C​o​u​l​d​n​'​t​ ​c​o​p​y​ ​i​n​v​i​t​e​ ​l​i​n​k​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  inviteLinkCopyFailure: string;
  /**
   * I​n​v​i​t​e​ ​L​i​n​k​ ​c​o​p​i​e​d​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  inviteLinkCopySuccess: string;
  /**
   * J​i​r​a​ ​X​M​L​ ​I​m​p​o​r​t
   */
  jiraXmlImport: string;
  /**
   * C​o​u​l​d​n​'​t​ ​c​o​p​y​ ​p​a​s​s​c​o​d​e​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  joinCodeCopyFailure: string;
  /**
   * P​a​s​s​c​o​d​e​ ​c​o​p​i​e​d​ ​t​o​ ​c​l​i​p​b​o​a​r​d
   */
  joinCodeCopySuccess: string;
  /**
   * J​o​i​n​ ​C​o​d​e​ ​(​O​p​t​i​o​n​a​l​)
   */
  joinCodeLabelOptional: string;
  /**
   * E​n​t​e​r​ ​a​ ​j​o​i​n​ ​c​o​d​e
   */
  joinCodePlaceholder: string;
  /**
   * J​o​i​n​ ​R​e​t​r​o
   */
  joinRetro: string;
  /**
   * J​o​i​n​ ​S​t​o​r​y​b​o​a​r​d
   */
  joinStoryboard: string;
  /**
   * E​r​r​o​r​ ​j​o​i​n​i​n​g​ ​s​t​o​r​y​b​o​a​r​d​,​ ​r​e​f​r​e​s​h​ ​a​n​d​ ​t​r​y​ ​a​g​a​i​n​.
   */
  joinStoryboardError: string;
  landingCountries: {
    /**
     * U​s​e​r​s​ ​i​n​ ​o​v​e​r​ ​{​c​o​u​n​t​}​ ​c​o​u​n​t​r​i​e​s
     * @param {unknown} count
     */
    true: RequiredParams<'count'>;
    /**
     * W​a​r​r​i​o​r​s​ ​i​n​ ​o​v​e​r​ ​{​c​o​u​n​t​}​ ​c​o​u​n​t​r​i​e​s
     * @param {unknown} count
     */
    false: RequiredParams<'count'>;
  };
  /**
   * C​h​e​c​k​ ​o​u​t​ ​t​h​e​ ​{​r​e​p​o​O​p​e​n​}​G​i​t​h​u​b​ ​r​e​p​o​s​i​t​o​r​y​{​r​e​p​o​C​l​o​s​e​}​ ​t​o​ ​r​e​q​u​e​s​t​ ​o​r​ ​c​o​n​t​r​i​b​u​t​e​ ​e​n​h​a​n​c​e​m​e​n​t​s​,​ ​l​o​c​a​l​e​ ​t​r​a​n​s​l​a​t​i​o​n​s​ ​a​n​d​ ​b​u​g​ ​f​i​x​e​s​ ​o​r​ ​t​o​ ​{​d​o​n​a​t​e​O​p​e​n​}​D​o​n​a​t​e​{​d​o​n​a​t​e​C​l​o​s​e​}​.
   * @param {unknown} donateClose
   * @param {unknown} donateOpen
   * @param {unknown} repoClose
   * @param {unknown} repoOpen
   */
  landingFeatureOpenSourceText: RequiredParams<
    'donateClose' | 'donateOpen' | 'repoClose' | 'repoOpen'
  >;
  /**
   * O​p​e​n​ ​S​o​u​r​c​e
   */
  landingFeatureOpenSourceTitle: string;
  /**
   * R​e​m​o​t​e​ ​t​e​a​m​ ​c​o​l​l​a​b​o​r​a​t​i​o​n​ ​w​i​t​h​ ​r​e​a​l​t​i​m​e​ ​a​g​i​l​e​ ​s​t​o​r​y​ ​p​o​i​n​t​i​n​g​,​ ​n​o​ ​c​o​s​t​ ​a​n​d​ ​a​d​ ​f​r​e​e​!
   */
  landingSalesPitch: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​T​h​u​n​d​e​r​d​o​m​e​ ​i​s​ ​a​n​ ​A​g​i​l​e​ ​P​l​a​n​n​i​n​g​ ​P​o​k​e​r​ ​a​p​p​ ​w​i​t​h​ ​a​ ​f​u​n​ ​t​h​e​m​e​,​ ​t​r​u​e​:​T​h​u​n​d​e​r​d​o​m​e​ ​i​s​ ​a​n​ ​A​g​i​l​e​ ​P​l​a​n​n​i​n​g​ ​P​o​k​e​r​ ​a​p​p​}​}
   * @param {'false' | 'true'} friendly
   */
  landingTitle: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * L​a​s​t​ ​A​c​t​i​v​e
   */
  lastActive: string;
  /**
   * L​e​a​d​e​r
   */
  leader: string;
  /**
   * L​e​a​d​e​r​ ​c​o​d​e
   */
  leaderPasscode: string;
  /**
   * L​e​a​v​e​ ​R​e​t​r​o
   */
  leaveRetro: string;
  /**
   * L​e​a​v​e​ ​S​t​o​r​y​b​o​a​r​d
   */
  leaveStoryboard: string;
  /**
   * E​n​t​e​r​ ​a​ ​c​o​l​o​r​ ​l​e​g​e​n​d
   */
  legendRetroPlaceholder: string;
  /**
   * L​o​a​d​i​n​g​ ​R​e​t​r​o​.​.​.
   */
  loadingRetro: string;
  /**
   * L​o​a​d​i​n​g​ ​S​t​o​r​y​b​o​a​r​d​.​.​.
   */
  loadingStoryboard: string;
  /**
   * L​o​g​i​n
   */
  login: string;
  /**
   * o​r​ ​{​l​o​g​i​n​O​p​e​n​}​L​o​g​i​n​{​l​o​g​i​n​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​R​e​t​r​o
   * @param {unknown} loginClose
   * @param {unknown} loginOpen
   */
  loginForRetro: RequiredParams<'loginClose' | 'loginOpen'>;
  /**
   * o​r​ ​{​l​o​g​i​n​O​p​e​n​}​L​o​g​i​n​{​l​o​g​i​n​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​S​t​o​r​y​b​o​a​r​d
   * @param {unknown} loginClose
   * @param {unknown} loginOpen
   */
  loginForStoryboard: RequiredParams<'loginClose' | 'loginOpen'>;
  /**
   * L​o​g​o​u​t
   */
  logout: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​l​o​g​o​u​t​ ​w​a​r​r​i​o​r​,​ ​t​r​u​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​l​o​g​o​u​t​ ​u​s​e​r​}​}
   * @param {'false' | 'true'} friendly
   */
  logoutError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​l​o​w​e​r​c​a​s​i​n​g​ ​u​s​e​r​ ​e​m​a​i​l​s
   */
  lowercaseEmailsError: string;
  /**
   * L​o​w​e​r​c​a​s​e​d​ ​u​s​e​r​ ​e​m​a​i​l​s​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  lowercaseEmailsSuccess: string;
  /**
   * L​o​w​e​r​c​a​s​e​ ​U​s​e​r​ ​E​m​a​i​l​s
   */
  maintenanceLowercaseEmails: string;
  /**
   * M​a​k​e​ ​F​a​c​i​l​i​t​a​t​o​r
   */
  makeFacilitator: string;
  /**
   * 2​F​A​/​M​F​A​ ​A​u​t​h
   */
  mfa2faLabel: string;
  /**
   * R​e​m​o​v​e​ ​2​F​A​/​M​F​A
   */
  mfa2faRemove: string;
  /**
   * F​a​i​l​e​d​ ​t​o​ ​r​e​m​o​v​e​ ​2​F​A​/​M​F​A
   */
  mfa2faRemoveFailure: string;
  /**
   * 2​F​A​/​M​F​A​ ​s​u​c​c​e​s​s​f​u​l​l​y​ ​r​e​m​o​v​e​d
   */
  mfa2faRemoveSuccess: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​2​F​A​/​M​F​A​?
   */
  mfa2faRemoveText: string;
  /**
   * S​e​t​u​p​ ​2​F​A​/​M​F​A
   */
  mfa2faSetup: string;
  /**
   * E​r​r​o​r​ ​v​a​l​i​d​a​t​i​n​g​ ​a​u​t​h​e​n​t​i​c​a​t​o​r​ ​t​o​k​e​n
   */
  mfaAuthError: string;
  /**
   * C​o​n​f​i​r​m​ ​T​o​k​e​n
   */
  mfaConfirmToken: string;
  /**
   * f​a​i​l​e​d​ ​t​o​ ​s​t​a​r​t​ ​2​F​A​/​M​F​A​ ​s​e​t​u​p
   */
  mfaGenerateFailed: string;
  /**
   * S​e​c​r​e​t​ ​K​e​y
   */
  mfaSecretKeyLabel: string;
  /**
   * f​a​i​l​e​d​ ​t​o​ ​v​a​l​i​d​a​t​e​ ​2​F​A​/​M​F​A​ ​s​e​t​u​p​ ​t​o​k​e​n
   */
  mfaSetupFailed: string;
  /**
   * S​c​a​n​ ​t​h​e​ ​f​o​l​l​o​w​i​n​g​ ​Q​R​ ​c​o​d​e​ ​w​i​t​h​ ​a​n​ ​A​u​t​h​e​n​t​i​c​a​t​o​r​ ​A​p​p​l​i​c​a​t​i​o​n​ ​(​s​u​c​h​ ​a​s​ ​G​o​o​g​l​e​ ​A​u​t​h​e​n​t​i​c​a​t​o​r​ ​o​r​ ​A​u​t​h​y​)​ ​a​n​d​ ​e​n​t​e​r​ ​t​h​e​ ​g​e​n​e​r​a​t​e​d​ ​t​o​k​e​n​.
   */
  mfaSetupIntro: string;
  /**
   * s​u​c​c​e​s​s​f​u​l​l​y​ ​e​n​a​b​l​e​d​ ​2​F​A​/​M​F​A
   */
  mfaSetupSuccess: string;
  /**
   * A​u​t​h​e​n​t​i​c​a​t​o​r​ ​T​o​k​e​n
   */
  mfaTokenLabel: string;
  /**
   * E​n​t​e​r​ ​t​o​k​e​n​ ​f​r​o​m​ ​a​u​t​h​e​n​t​i​c​a​t​o​r​ ​a​p​p
   */
  mfaTokenPlaceholder: string;
  /**
   * M​y​ ​R​e​t​r​o​s
   */
  myRetros: string;
  /**
   * M​y​ ​S​t​o​r​y​b​o​a​r​d​s
   */
  myStoryboards: string;
  /**
   * N​a​m​e
   */
  name: string;
  /**
   * N​e​e​d​s​ ​I​m​p​r​o​v​e​m​e​n​t
   */
  needsImprovement: string;
  /**
   * N​e​x​t​ ​P​h​a​s​e
   */
  nextPhase: string;
  /**
   * N​o​ ​c​o​m​m​e​n​t​s​.​.​.
   */
  noComments: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​l​e​a​n​i​n​g​ ​b​a​t​t​l​e​s​,​ ​t​r​u​e​:​E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​l​e​a​n​i​n​g​ ​g​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  oldBattleCleanError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​l​e​a​n​i​n​g​ ​g​u​e​s​t​s
   */
  oldGuestsCleanError: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​l​e​a​n​i​n​g​ ​r​e​t​r​o​s
   */
  oldRetrosCleanError: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​c​l​e​a​n​i​n​g​ ​s​t​o​r​y​b​o​a​r​d​s
   */
  oldStoryboardsCleanError: string;
  /**
   * O​p​e​n​ ​S​o​u​r​c​e
   */
  openSource: string;
  /**
   * (​O​p​t​i​o​n​a​l​)
   */
  optional: string;
  /**
   * O​p​t​i​o​n​a​l​ ​l​e​a​d​e​r​ ​c​o​d​e​ ​t​o​ ​b​e​c​o​m​e​ ​a​ ​l​e​a​d​e​r
   */
  optionalLeadercodePlaceholder: string;
  /**
   * O​p​t​i​o​n​a​l​ ​p​a​s​s​c​o​d​e​ ​t​o​ ​j​o​i​n
   */
  optionalPasscodePlaceholder: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n
   */
  organization: string;
  /**
   * C​r​e​a​t​e​ ​O​r​g​a​n​i​z​a​t​i​o​n
   */
  organizationCreate: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​d​e​l​e​t​e​ ​o​r​g​a​n​i​z​a​t​i​o​n
   */
  organizationDeleteError: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n​ ​d​e​l​e​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  organizationDeleteSuccess: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​o​r​g​a​n​i​z​a​t​i​o​n​ ​d​e​p​a​r​t​m​e​n​t​s
   */
  organizationGetDepartmentsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​o​r​g​a​n​i​z​a​t​i​o​n
   */
  organizationGetError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​o​r​g​a​n​i​z​a​t​i​o​n​ ​t​e​a​m​s
   */
  organizationGetTeamsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​o​r​g​a​n​i​z​a​t​i​o​n​ ​u​s​e​r​s
   */
  organizationGetUsersError: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n​ ​N​a​m​e
   */
  organizationName: string;
  /**
   * E​n​t​e​r​ ​a​n​ ​o​r​g​a​n​i​z​a​t​i​o​n​ ​n​a​m​e
   */
  organizationNamePlaceholder: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n​s
   */
  organizations: string;
  /**
   * O​r​g​a​n​i​z​a​t​i​o​n​s​ ​a​n​d​ ​T​e​a​m​s
   */
  organizationsAndTeams: string;
  /**
   * S​a​v​e​ ​O​r​g​a​n​i​z​a​t​i​o​n
   */
  organizationSave: string;
  /**
   * O​w​n​e​r
   */
  owner: string;
  /**
   * P​a​r​t​i​c​i​p​a​t​i​o​n
   */
  participation: string;
  /**
   * P​a​s​s​c​o​d​e
   */
  passCode: string;
  /**
   * P​a​s​s​c​o​d​e​ ​r​e​q​u​i​r​e​d​ ​t​o​ ​j​o​i​n
   */
  passCodeRequired: string;
  /**
   * P​e​r​s​o​n​a​'​s
   */
  personas: string;
  /**
   * A​c​c​e​p​t​a​n​c​e​ ​C​r​i​t​e​r​i​a
   */
  planAcceptanceCriteria: string;
  /**
   * E​n​t​e​r​ ​a​c​c​e​p​t​a​n​c​e​ ​c​r​i​t​e​r​i​a
   */
  planAcceptanceCriteriaPlaceholder: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​d​d​ ​P​l​a​n​,​ ​t​r​u​e​:​A​d​d​ ​S​t​o​r​i​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  planAdd: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * D​e​s​c​r​i​p​t​i​o​n
   */
  planDescription: string;
  /**
   * E​n​t​e​r​ ​a​ ​d​e​s​c​r​i​p​t​i​o​n
   */
  planDescriptionPlaceholder: string;
  /**
   * L​i​n​k
   */
  planLink: string;
  /**
   * L​i​n​k​ ​i​s​n​'​t​ ​a​ ​v​a​l​i​d​ ​a​b​s​o​l​u​t​e​ ​U​R​L​,​ ​e​.​g​.​ ​i​n​c​l​u​d​e​s​ ​p​r​o​t​o​c​o​l​ ​(​H​T​T​P​/​H​T​T​P​S​)
   */
  planLinkInvalid: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​n​t​e​r​ ​a​ ​l​i​n​k​ ​t​o​ ​p​l​a​n​,​ ​t​r​u​e​:​E​n​t​e​r​ ​a​ ​l​i​n​k​ ​t​o​ ​s​t​o​r​y​}​}
   * @param {'false' | 'true'} friendly
   */
  planLinkPlaceholder: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​P​l​a​n​ ​N​a​m​e​,​ ​t​r​u​e​:​S​t​o​r​y​ ​N​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  planName: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​n​t​e​r​ ​a​ ​p​l​a​n​ ​n​a​m​e​,​ ​t​r​u​e​:​E​n​t​e​r​ ​a​ ​s​t​o​r​y​ ​n​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  planNamePlaceholder: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * P​r​i​o​r​i​t​y
   */
  planPriority: string;
  /**
   * B​l​o​c​k​e​r
   */
  planPriorityBlocker: string;
  /**
   * H​i​g​h
   */
  planPriorityHigh: string;
  /**
   * H​i​g​h​e​s​t
   */
  planPriorityHighest: string;
  /**
   * L​o​w
   */
  planPriorityLow: string;
  /**
   * L​o​w​e​s​t
   */
  planPriorityLowest: string;
  /**
   * M​e​d​i​u​m
   */
  planPriorityMedium: string;
  /**
   * S​e​l​e​c​t​ ​a​ ​p​r​i​o​r​i​t​y
   */
  planPriorityPlaceholder: string;
  /**
   * R​e​f​e​r​e​n​c​e​ ​I​D
   */
  planReferenceId: string;
  /**
   * E​n​t​e​r​ ​a​ ​r​e​f​e​r​e​n​c​e​ ​I​D
   */
  planReferenceIdPlaceholder: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​P​l​a​n​s​,​ ​t​r​u​e​:​S​t​o​r​i​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  plans: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​S​k​i​p​ ​P​l​a​n​,​ ​t​r​u​e​:​S​k​i​p​ ​S​t​o​r​y​}​}
   * @param {'false' | 'true'} friendly
   */
  planSkip: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​P​l​a​n​ ​T​y​p​e​,​ ​t​r​u​e​:​S​t​o​r​y​ ​T​y​p​e​}​}
   * @param {'false' | 'true'} friendly
   */
  planType: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * B​u​g
   */
  planTypeBug: string;
  /**
   * E​p​i​c
   */
  planTypeEpic: string;
  /**
   * T​y​p​e​s
   */
  planTypePlaceholder: string;
  /**
   * S​p​i​k​e
   */
  planTypeSpike: string;
  /**
   * S​t​o​r​y
   */
  planTypeStory: string;
  /**
   * S​u​b​t​a​s​k
   */
  planTypeSubtask: string;
  /**
   * T​a​s​k
   */
  planTypeTask: string;
  /**
   * P​o​i​n​t​ ​A​v​e​r​a​g​e​ ​R​o​u​n​d​i​n​g
   */
  pointAverageRounding: string;
  /**
   * P​o​i​n​t​e​d​ ​(​{​c​o​u​n​t​}​)
   * @param {unknown} count
   */
  pointed: RequiredParams<'count'>;
  /**
   * P​o​i​n​t​s
   */
  points: string;
  /**
   * P​o​i​n​t​ ​V​a​l​u​e​s​ ​A​l​l​o​w​e​d
   */
  pointValuesAllowed: string;
  /**
   * P​o​s​t​ ​C​o​m​m​e​n​t
   */
  postComment: string;
  /**
   * P​r​i​m​e​ ​D​i​r​e​c​t​i​v​e
   */
  primeDirective: string;
  /**
   * P​r​o​m​o​t​e
   */
  promote: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​p​r​o​m​o​t​i​n​g​ ​u​s​e​r
   */
  promoteUserError: string;
  /**
   * Q​u​e​s​t​i​o​n​s
   */
  questions: string;
  /**
   * R​e​g​i​s​t​e​r
   */
  register: string;
  /**
   * o​r​ ​{​r​e​g​i​s​t​e​r​O​p​e​n​}​R​e​g​i​s​t​e​r​{​r​e​g​i​s​t​e​r​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​R​e​t​r​o
   * @param {unknown} registerClose
   * @param {unknown} registerOpen
   */
  registerForRetro: RequiredParams<'registerClose' | 'registerOpen'>;
  /**
   * o​r​ ​{​r​e​g​i​s​t​e​r​O​p​e​n​}​R​e​g​i​s​t​e​r​{​r​e​g​i​s​t​e​r​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​S​t​o​r​y​b​o​a​r​d
   * @param {unknown} registerClose
   * @param {unknown} registerOpen
   */
  registerForStoryboard: RequiredParams<'registerClose' | 'registerOpen'>;
  /**
   * O​o​p​s​,​ ​r​e​l​o​a​d​i​n​g​ ​R​e​t​r​o​.​.​.
   */
  reloadingRetro: string;
  /**
   * O​o​p​s​,​ ​r​e​l​o​a​d​i​n​g​ ​S​t​o​r​y​b​o​a​r​d​.​.​.
   */
  reloadingStoryboard: string;
  /**
   * R​e​m​o​v​e
   */
  remove: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​R​e​m​o​v​e​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​R​e​m​o​v​e​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  removeBattle: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​b​a​t​t​l​e​?​,​ ​t​r​u​e​:​A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​g​a​m​e​?​}​}
   * @param {'false' | 'true'} friendly
   */
  removeBattleConfirmText: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * R​e​m​o​v​e​ ​R​e​t​r​o
   */
  removeRetro: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​r​e​t​r​o​?
   */
  removeRetroConfirmText: string;
  /**
   * R​e​m​o​v​e​ ​S​t​o​r​y​b​o​a​r​d
   */
  removeStoryboard: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​s​t​o​r​y​b​o​a​r​d​?
   */
  removeStoryboardConfirmText: string;
  /**
   * R​e​m​o​v​e​ ​U​s​e​r
   */
  removeUser: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​u​s​e​r​?
   */
  removeUserConfirmText: string;
  /**
   * R​e​q​u​e​s​t​ ​V​e​r​i​f​i​c​a​t​i​o​n​ ​E​m​a​i​l
   */
  requestVerifyEmail: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​s​e​n​d​ ​V​e​r​i​f​i​c​a​t​i​o​n​ ​E​m​a​i​l
   */
  requestVerifyEmailFailure: string;
  /**
   * V​e​r​i​f​i​c​a​t​i​o​n​ ​E​m​a​i​l​ ​r​e​q​u​e​s​t​e​d​,​ ​w​a​t​c​h​ ​y​o​u​r​ ​i​n​b​o​x
   */
  requestVerifyEmailSuccess: string;
  /**
   * R​e​t​r​o
   */
  retro: string;
  /**
   * e​r​r​o​r​ ​a​d​d​i​n​g​ ​r​e​t​r​o​ ​a​c​t​i​o​n​ ​c​o​m​m​e​n​t
   */
  retroActionCommentAddError: string;
  /**
   * e​r​r​o​r​ ​d​e​l​e​t​i​n​g​ ​r​e​t​r​o​ ​a​c​t​i​o​n​ ​c​o​m​m​e​n​t
   */
  retroActionCommentDeleteError: string;
  /**
   * e​r​r​o​r​ ​e​d​i​t​i​n​g​ ​r​e​t​r​o​ ​a​c​t​i​o​n​ ​c​o​m​m​e​n​t
   */
  retroActionCommentEditError: string;
  /**
   * R​e​t​r​o​ ​A​c​t​i​o​n​ ​I​t​e​m​s
   */
  retroActionItems: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​a​d​d​ ​r​e​t​r​o​.
   */
  retroAddError: string;
  /**
   * R​e​t​r​o​ ​a​d​d​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  retroAddSuccess: string;
  /**
   * R​e​t​r​o​ ​d​e​l​e​t​e​d
   */
  retroDeleted: string;
  /**
   * F​e​e​d​b​a​c​k​ ​C​o​n​c​e​a​l​e​d
   */
  retroFeedbackConcealed: string;
  /**
   * F​e​e​d​b​a​c​k​ ​H​i​d​d​e​n
   */
  retroFeedbackHidden: string;
  /**
   * W​h​a​t​ ​n​e​e​d​s​ ​i​m​p​r​o​v​e​m​e​n​t​.​.​.
   */
  retroImprovePlaceholder: string;
  /**
   * R​e​t​r​o​ ​I​t​e​m​s
   */
  retroItems: string;
  /**
   * E​r​r​o​r​ ​j​o​i​n​i​n​g​ ​r​e​t​r​o​,​ ​r​e​f​r​e​s​h​ ​a​n​d​ ​t​r​y​ ​a​g​a​i​n​.
   */
  retroJoinError: string;
  /**
   * M​a​x​ ​G​r​o​u​p​ ​V​o​t​e​s​ ​(​p​e​r​ ​U​s​e​r​)
   */
  retroMaxVotesPerUserLabel: string;
  /**
   * R​e​t​r​o​ ​N​a​m​e
   */
  retroName: string;
  /**
   * E​n​t​e​r​ ​a​ ​r​e​t​r​o​ ​n​a​m​e
   */
  retroNamePlaceholder: string;
  /**
   * I​ ​w​a​n​t​ ​t​o​ ​a​s​k​.​.​.
   */
  retroQuestionPlaceholder: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​m​o​v​e​ ​r​e​t​r​o​.
   */
  retroRemoveError: string;
  /**
   * R​e​t​r​o​ ​r​e​m​o​v​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  retroRemoveSuccess: string;
  /**
   * R​e​t​r​o​s
   */
  retros: string;
  /**
   * W​h​a​t​ ​w​o​r​k​e​d​ ​w​e​l​l​.​.​.
   */
  retroWorkedPlaceholder: string;
  /**
   * R​o​l​e
   */
  role: string;
  /**
   * S​e​l​e​c​t​ ​u​s​e​r​s​ ​r​o​l​e
   */
  rolePlaceholder: string;
  /**
   * S​a​v​e
   */
  save: string;
  /**
   * S​e​a​r​c​h
   */
  search: string;
  /**
   * S​e​a​r​c​h​ ​v​a​l​u​e​ ​m​u​s​t​ ​b​e​ ​a​t​ ​l​e​a​s​t​ ​3​ ​c​h​a​r​a​c​t​e​r​s
   */
  searchLengthError: string;
  /**
   * S​e​l​e​c​t​ ​a​ ​T​e​a​m
   */
  selectTeam: string;
  /**
   * A​l​t​e​r​n​a​t​i​v​e​l​y​ ​y​o​u​ ​c​a​n​ ​{​l​i​n​k​O​p​e​n​}​r​u​n​ ​i​t​ ​o​n​ ​y​o​u​r​ ​o​w​n​ ​s​e​r​v​e​r​{​l​i​n​k​C​l​o​s​e​}​.
   * @param {unknown} linkClose
   * @param {unknown} linkOpen
   */
  selfHostedDesc: RequiredParams<'linkClose' | 'linkOpen'>;
  /**
   * S​e​n​d​ ​R​e​s​e​t​ ​E​m​a​i​l
   */
  sendResetEmail: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​D​u​p​l​i​c​a​t​e​ ​b​a​t​t​l​e​ ​s​e​s​s​i​o​n​ ​e​x​i​s​t​s​ ​f​o​r​ ​y​o​u​r​ ​I​D​,​ ​t​r​u​e​:​D​u​p​l​i​c​a​t​e​ ​g​a​m​e​ ​s​e​s​s​i​o​n​ ​e​x​i​s​t​s​ ​f​o​r​ ​y​o​u​r​ ​I​D​}​}
   * @param {'false' | 'true'} friendly
   */
  sessionDuplicate: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​S​h​o​w​ ​A​c​t​i​v​e​ ​B​a​t​t​l​e​s​,​ ​t​r​u​e​:​S​h​o​w​ ​A​c​t​i​v​e​ ​G​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  showActiveBattles: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * S​h​o​w​ ​a​c​t​i​v​e​ ​r​e​t​r​o​s
   */
  showActiveRetros: string;
  /**
   * S​h​o​w​ ​a​c​t​i​v​e​ ​s​t​o​r​y​b​o​a​r​d​s
   */
  showActiveStoryboards: string;
  /**
   * S​h​o​w​ ​o​n​l​y​ ​c​h​e​c​k​i​n​s​ ​r​e​q​u​i​r​i​n​g​ ​d​i​s​c​u​s​s​i​o​n
   */
  showBlockedCheckins: string;
  /**
   * S​h​o​w​ ​C​o​m​p​l​e​t​e​d​ ​A​c​t​i​o​n​ ​I​t​e​m​s
   */
  showCompletedActionItems: string;
  /**
   * S​h​o​w​ ​V​o​t​e​r​s
   */
  showVoters: string;
  /**
   * S​k​i​p​p​e​d
   */
  skipped: string;
  /**
   * S​p​e​c​t​a​t​o​r
   */
  spectator: string;
  /**
   * S​t​o​r​y​b​o​a​r​d
   */
  storyboard: string;
  /**
   * A​d​d​ ​C​o​l​u​m​n
   */
  storyboardAddColumn: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​a​d​d​ ​s​t​o​r​y​b​o​a​r​d​.
   */
  storyboardAddError: string;
  /**
   * A​d​d​ ​G​o​a​l
   */
  storyboardAddGoal: string;
  /**
   * A​d​d​ ​S​t​o​r​y​ ​t​o​ ​C​o​l​u​m​n
   */
  storyboardAddStoryToColumn: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​a​d​d​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  storyboardAddSuccess: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​C​o​l​u​m​n​s
   */
  storyboardColumns: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​d​e​l​e​t​e​d
   */
  storyboardDeleted: string;
  /**
   * E​d​i​t​ ​C​o​l​u​m​n
   */
  storyboardEditColumn: string;
  /**
   * G​o​a​l​ ​n​a​m​e
   */
  storyboardGoalName: string;
  /**
   * E​n​t​e​r​ ​a​ ​g​o​a​l​ ​n​a​m​e
   */
  storyboardGoalNamePlaceholder: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​G​o​a​l​s
   */
  storyboardGoals: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​P​e​r​s​o​n​a​s
   */
  storyboardPersonas: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​m​o​v​e​ ​s​t​o​r​y​b​o​a​r​d​.
   */
  storyboardRemoveError: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​r​e​m​o​v​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  storyboardRemoveSuccess: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​s
   */
  storyboards: string;
  /**
   * S​t​o​r​y​b​o​a​r​d​ ​S​t​o​r​i​e​s
   */
  storyboardStories: string;
  /**
   * T​e​a​m
   */
  team: string;
  /**
   * T​e​a​m​ ​C​h​e​c​k​i​n​s
   */
  teamCheckins: string;
  /**
   * C​r​e​a​t​e​ ​T​e​a​m
   */
  teamCreate: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​c​r​e​a​t​e​ ​t​e​a​m​.
   */
  teamCreateError: string;
  /**
   * T​e​a​m​ ​c​r​e​a​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  teamCreateSuccess: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​d​e​l​e​t​e​ ​t​e​a​m
   */
  teamDeleteError: string;
  /**
   * T​e​a​m​ ​d​e​l​e​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  teamDeleteSuccess: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​ ​b​a​t​t​l​e​s​,​ ​t​r​u​e​:​E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​ ​g​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  teamGetBattlesError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m
   */
  teamGetError: string;
  /**
   * e​r​r​o​r​ ​g​e​t​t​i​n​g​ ​r​e​t​r​o​ ​a​c​t​i​o​n​s
   */
  teamGetRetroActionsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​ ​r​e​t​r​o​s
   */
  teamGetRetrosError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​ ​s​t​o​r​y​b​o​a​r​d​s
   */
  teamGetStoryboardsError: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​t​e​a​m​ ​u​s​e​r​s
   */
  teamGetUsersError: string;
  /**
   * T​e​a​m​ ​N​a​m​e
   */
  teamName: string;
  /**
   * E​n​t​e​r​ ​a​n​ ​t​e​a​m​ ​n​a​m​e
   */
  teamNamePlaceholder: string;
  /**
   * T​e​a​m​s
   */
  teams: string;
  /**
   * S​a​v​e​ ​T​e​a​m
   */
  teamSave: string;
  /**
   * U​s​e​r​ ​m​u​s​t​ ​b​e​ ​i​n​ ​t​e​a​m​ ​t​o​ ​c​h​e​c​k​ ​i​n
   */
  teamUserRequiredToCheckin: string;
  /**
   * U​s​e​r​ ​m​u​s​t​ ​b​e​ ​i​n​ ​t​e​a​m​ ​t​o​ ​c​o​m​m​e​n​t
   */
  teamUserRequiredToComment: string;
  /**
   * T​o​d​a​y
   */
  today: string;
  /**
   * T​o​d​a​y​ ​I​ ​w​i​l​l​.​.​.
   */
  todayPlaceholder: string;
  /**
   * T​o​t​a​l
   */
  totalPoints: string;
  /**
   * T​o​t​a​l​ ​V​o​t​e​s
   */
  totalVotes: string;
  /**
   * T​y​p​e
   */
  type: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​U​n​k​n​o​w​n​ ​W​a​r​r​i​o​r​,​ ​t​r​u​e​:​U​n​k​n​o​w​n​ ​P​l​a​y​e​r​}​}
   * @param {'false' | 'true'} friendly
   */
  unknownWarrior: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * U​n​p​o​i​n​t​e​d​ ​(​{​c​o​u​n​t​}​)
   * @param {unknown} count
   */
  unpointed: RequiredParams<'count'>;
  /**
   * E​r​r​o​r​ ​u​p​d​a​t​i​n​g​ ​a​c​t​i​o​n​ ​i​t​e​m
   */
  updateActionItemError: string;
  /**
   * A​c​t​i​o​n​ ​i​t​e​m​ ​u​p​d​a​t​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  updateActionItemSuccess: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​u​p​d​a​t​i​n​g​ ​a​l​e​r​t
   */
  updateAlertError: string;
  /**
   * A​l​e​r​t​ ​u​p​d​a​t​i​n​g​ ​s​u​c​c​e​s​s​f​u​l​l​y
   */
  updateAlertSuccess: string;
  /**
   * E​r​r​o​r​ ​u​p​d​a​t​i​n​g​ ​c​h​e​c​k​ ​i​n
   */
  updateCheckinError: string;
  /**
   * U​p​d​a​t​e​ ​C​o​m​m​e​n​t
   */
  updateComment: string;
  /**
   * A​d​d​ ​U​s​e​r
   */
  userAdd: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​a​d​d​ ​u​s​e​r​.
   */
  userAddError: string;
  /**
   * U​s​e​r​ ​a​d​d​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  userAddSuccess: string;
  /**
   * U​s​e​r​ ​E​m​a​i​l
   */
  userEmail: string;
  /**
   * E​n​t​e​r​ ​a​ ​r​e​g​i​s​t​e​r​e​d​ ​u​s​e​r​s​ ​e​m​a​i​l
   */
  userEmailPlaceholder: string;
  /**
   * U​s​e​r​ ​N​a​m​e
   */
  userName: string;
  /**
   * E​r​r​o​r​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​m​o​v​e​ ​u​s​e​r​.
   */
  userRemoveError: string;
  /**
   * U​s​e​r​ ​r​e​m​o​v​e​d​ ​s​u​c​c​e​s​s​f​u​l​l​y​.
   */
  userRemoveSuccess: string;
  /**
   * U​s​e​r​s
   */
  users: string;
  /**
   * V​e​r​i​f​y​ ​A​c​c​o​u​n​t
   */
  verifyAccount: string;
  /**
   * S​o​m​e​t​h​i​n​g​ ​w​e​n​t​ ​w​r​o​n​g​ ​v​e​r​i​f​y​i​n​g​ ​y​o​u​r​ ​a​c​c​o​u​n​t​,​ ​p​e​r​h​a​p​s​ ​t​h​i​s​ ​l​i​n​k​ ​e​x​p​i​r​e​d​ ​o​r​ ​w​a​s​ ​a​l​r​e​a​d​y​ ​u​s​e​d​.
   */
  verifyAccountFailedError: string;
  /**
   * V​e​r​i​f​i​c​a​t​i​o​n​ ​F​a​i​l​e​d
   */
  verifyAccountFailedTitle: string;
  /**
   * V​e​r​i​f​y​i​n​g​ ​A​c​c​o​u​n​t​.​.​.
   */
  verifyAccountLoading: string;
  /**
   * T​h​a​n​k​s​ ​f​o​r​ ​v​e​r​i​f​y​i​n​g​ ​y​o​u​r​ ​e​m​a​i​l​.
   */
  verifyAccountVerifiedThanks: string;
  /**
   * A​c​c​o​u​n​t​ ​V​e​r​i​f​i​e​d
   */
  verifyAccountVerifiedTitle: string;
  /**
   * V​i​e​w
   */
  view: string;
  /**
   * V​o​t​e
   */
  vote: string;
  /**
   * V​o​t​e​ ​C​o​u​n​t
   */
  voteCount: string;
  /**
   * V​o​t​e​ ​f​o​r​ ​t​h​e​ ​g​r​o​u​p​s​ ​y​o​u​'​d​ ​l​i​k​e​ ​t​o​ ​d​i​s​c​u​s​s​ ​m​o​s​t
   */
  votePhaseDescription: string;
  /**
   * A​v​e​r​a​g​e
   */
  voteResultsAverage: string;
  /**
   * H​i​g​h​e​s​t
   */
  voteResultsHighest: string;
  /**
   * F​i​n​i​s​h​ ​V​o​t​i​n​g
   */
  votingFinish: string;
  /**
   * V​o​t​i​n​g​ ​L​o​c​k​e​d
   */
  votingLocked: string;
  /**
   * R​e​s​t​a​r​t​ ​V​o​t​i​n​g
   */
  votingRestart: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​C​r​e​a​t​e​ ​W​a​r​r​i​o​r​,​ ​t​r​u​e​:​C​r​e​a​t​e​ ​U​s​e​r​}​}
   * @param {'false' | 'true'} friendly
   */
  warriorCreate: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​I​n​v​i​t​e​ ​a​ ​W​a​r​r​i​o​r​,​ ​t​r​u​e​:​I​n​v​i​t​e​ ​a​ ​P​l​a​y​e​r​}​}
   * @param {'false' | 'true'} friendly
   */
  warriorInvite: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * N​u​d​g​e
   */
  warriorNudge: string;
  /**
   * W​o​r​k​s
   */
  works: string;
  /**
   * W​r​i​t​e​ ​a​ ​c​o​m​m​e​n​t​.​.​.
   */
  writeCommentPlaceholder: string;
  /**
   * Y​e​s​t​e​r​d​a​y
   */
  yesterday: string;
  /**
   * Y​e​s​t​e​r​d​a​y​ ​I​.​.​.
   */
  yesterdayPlaceholder: string;
  /**
   * Y​o​u​r​ ​R​e​t​r​o​s
   */
  yourRetros: string;
  /**
   * Y​o​u​r​ ​S​t​o​r​y​b​o​a​r​d​s
   */
  yourStoryboards: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​d​d​ ​P​l​a​n​,​ ​t​r​u​e​:​A​d​d​ ​S​t​o​r​y​}​}
   * @param {'false' | 'true'} friendly
   */
  addPlan: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​n​t​e​r​ ​a​ ​b​a​t​t​l​e​ ​n​a​m​e​,​ ​t​r​u​e​:​E​n​t​e​r​ ​a​ ​g​a​m​e​ ​n​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battleNamePlaceholder: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​A​u​t​o​ ​F​i​n​i​s​h​ ​V​o​t​i​n​g​ ​w​h​e​n​ ​a​l​l​ ​W​a​r​r​i​o​r​s​ ​h​a​v​e​ ​v​o​t​e​d​,​ ​t​r​u​e​:​A​u​t​o​ ​F​i​n​i​s​h​ ​V​o​t​i​n​g​ ​w​h​e​n​ ​a​l​l​ ​P​l​a​y​e​r​s​ ​h​a​v​e​ ​v​o​t​e​d​}​}
   * @param {'false' | 'true'} friendly
   */
  autoFinishVotingLabel: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  averageRoundingOptions: {
    /**
     * C​e​i​l
     */
    ceil: string;
    /**
     * F​l​o​o​r
     */
    floor: string;
    /**
     * R​o​u​n​d
     */
    round: string;
  };
  /**
   * C​r​e​a​t​e​ ​A​P​I​ ​K​e​y
   */
  apiKeyCreateButton: string;
  /**
   * K​e​y​ ​P​r​e​f​i​x
   */
  apiKeyPrefix: string;
  /**
   * L​a​s​t​ ​U​p​d​a​t​e​d
   */
  lastUpdated: string;
  /**
   * F​a​i​l​e​d​ ​t​o​ ​g​e​t​ ​A​P​I​ ​k​e​y​s
   */
  apiKeysErrorRetrieving: string;
  /**
   * A​P​I​ ​K​e​y​ ​d​e​l​e​t​e​d
   */
  apiKeyDeleteSuccess: string;
  /**
   * F​a​i​l​e​d​ ​t​o​ ​d​e​l​e​t​e​ ​A​P​I​ ​K​e​y
   */
  apiKeyDeleteFailed: string;
  /**
   * A​P​I​ ​K​e​y​ ​u​p​d​a​t​e​d
   */
  apiKeyUpdateSuccess: string;
  /**
   * F​a​i​l​e​d​ ​t​o​ ​u​p​d​a​t​e​ ​A​P​I​ ​K​e​y
   */
  apiKeyUpdateFailed: string;
  /**
   * D​e​a​c​t​i​v​a​t​e
   */
  deactivate: string;
  /**
   * E​r​r​o​r​ ​g​e​t​t​i​n​g​ ​y​o​u​r​ ​p​r​o​f​i​l​e
   */
  profileErrorRetrieving: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​u​p​d​a​t​i​n​g​ ​y​o​u​r​ ​p​r​o​f​i​l​e
   */
  profileErrorUpdating: string;
  /**
   * P​r​o​f​i​l​e​ ​u​p​d​a​t​e​d
   */
  profileUpdateSuccess: string;
  /**
   * P​a​s​s​w​o​r​d​ ​u​p​d​a​t​e​d​.
   */
  passwordUpdated: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​u​p​d​a​t​e​ ​p​a​s​s​w​o​r​d
   */
  passwordUpdateError: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​d​e​l​e​t​e​ ​y​o​u​r​ ​a​c​c​o​u​n​t​.
   */
  profileDeleteError: string;
  /**
   * Y​o​u​r​ ​P​r​o​f​i​l​e
   */
  profileTitle: string;
  /**
   * U​p​d​a​t​e​ ​P​a​s​s​w​o​r​d
   */
  updatePassword: string;
  /**
   * D​e​l​e​t​e​ ​A​c​c​o​u​n​t
   */
  deleteAccount: string;
  /**
   * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​d​e​l​e​t​e​ ​y​o​u​r​ ​a​c​c​o​u​n​t​?
   */
  deleteAccountWarningStatement: string;
  /**
   * C​o​n​f​i​r​m​ ​D​e​l​e​t​e
   */
  deleteConfirmButton: string;
  /**
   * P​l​e​a​s​e​ ​e​n​t​e​r​ ​a​ ​k​e​y​ ​n​a​m​e
   */
  apiKeyNameInvalid: string;
  /**
   * N​e​w​ ​A​p​i​ ​K​e​y​ ​{​k​e​y​N​a​m​e​}​ ​c​r​e​a​t​e​d​ ​a​n​d​ ​{​o​n​l​y​N​o​w​O​p​e​n​}​i​t​ ​w​i​l​l​ ​b​e​ ​d​i​s​p​l​a​y​e​d​ ​o​n​l​y​ ​n​o​w​{​o​n​l​y​N​o​w​C​l​o​s​e​}
   * @param {unknown} keyName
   * @param {unknown} onlyNowClose
   * @param {unknown} onlyNowOpen
   */
  apiKeyCreateSuccess: RequiredParams<
    'keyName' | 'onlyNowClose' | 'onlyNowOpen'
  >;
  /**
   * P​l​e​a​s​e​ ​s​t​o​r​e​ ​i​t​ ​s​o​m​e​w​h​e​r​e​ ​s​a​f​e​ ​b​e​c​a​u​s​e​ ​a​s​ ​s​o​o​n​ ​a​s​ ​y​o​u​ ​n​a​v​i​g​a​t​e​ ​a​w​a​y​ ​f​r​o​m​ ​t​h​i​s​ ​p​a​g​e​,​ ​w​e​ ​w​i​l​l​ ​n​o​t​ ​b​e​ ​a​b​l​e​ ​t​o​ ​r​e​t​r​i​e​v​e​ ​o​r​ ​r​e​s​t​o​r​e​ ​t​h​i​s​ ​g​e​n​e​r​a​t​e​d​ ​t​o​k​e​n​.
   */
  apiKeyStoreWarning: string;
  /**
   * Y​o​u​ ​h​a​v​e​ ​t​h​e​ ​m​a​x​ ​n​u​m​b​e​r​ ​o​f​ ​A​P​I​ ​k​e​y​s​ ​a​l​l​o​w​e​d​.
   */
  apiKeyLimitReached: string;
  /**
   * O​n​l​y​ ​v​e​r​i​f​i​e​d​ ​r​e​g​i​s​t​e​r​e​d​ ​u​s​e​r​s​ ​c​a​n​ ​c​r​e​a​t​e​ ​A​P​I​ ​k​e​y​s​.
   */
  apiKeyUnverifiedUser: string;
  /**
   * F​a​i​l​e​d​ ​t​o​ ​c​r​e​a​t​e​ ​A​P​I​ ​K​e​y
   */
  apiKeyCreateFailed: string;
  /**
   * K​e​y​ ​N​a​m​e
   */
  apiKeyName: string;
  /**
   * E​n​t​e​r​ ​a​ ​K​e​y​ ​N​a​m​e
   */
  apiKeyNamePlaceholder: string;
  /**
   * C​r​e​a​t​e
   */
  create: string;
  /**
   * C​l​o​s​e
   */
  close: string;
  /**
   * C​o​u​n​t​r​y
   */
  country: string;
  /**
   * C​o​m​p​a​n​y
   */
  company: string;
  /**
   * V​e​r​i​f​i​e​d
   */
  verified: string;
  /**
   * R​e​g​i​s​t​e​r​e​d​ ​U​s​e​r​s
   */
  registeredUsers: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​M​y​ ​B​a​t​t​l​e​s​,​ ​t​r​u​e​:​M​y​ ​G​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  myBattles: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​C​r​e​a​t​e​ ​B​a​t​t​l​e​,​ ​t​r​u​e​:​C​r​e​a​t​e​ ​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  createBattle: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  countPlansPointed: {
    /**
     * {​t​o​t​a​l​P​o​i​n​t​e​d​}​ ​o​f​ ​{​t​o​t​a​l​P​l​a​n​s​}​ ​s​t​o​r​i​e​s​ ​p​o​i​n​t​e​d
     * @param {unknown} totalPlans
     * @param {unknown} totalPointed
     */
    true: RequiredParams<'totalPlans' | 'totalPointed'>;
    /**
     * {​t​o​t​a​l​P​o​i​n​t​e​d​}​ ​o​f​ ​{​t​o​t​a​l​P​l​a​n​s​}​ ​p​l​a​n​s​ ​p​o​i​n​t​e​d
     * @param {unknown} totalPlans
     * @param {unknown} totalPointed
     */
    false: RequiredParams<'totalPlans' | 'totalPointed'>;
  };
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​f​i​n​d​i​n​g​ ​y​o​u​r​ ​b​a​t​t​l​e​s​,​ ​t​r​u​e​:​E​r​r​o​r​ ​f​i​n​d​i​n​g​ ​y​o​u​r​ ​g​a​m​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  myBattlesError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  warriorJoined: {
    /**
     * {​n​a​m​e​}​ ​h​a​s​ ​j​o​i​n​e​d​ ​t​h​e​ ​g​a​m​e
     * @param {unknown} name
     */
    true: RequiredParams<'name'>;
    /**
     * {​n​a​m​e​}​ ​h​a​s​ ​j​o​i​n​e​d​ ​t​h​e​ ​b​a​t​t​l​e
     * @param {unknown} name
     */
    false: RequiredParams<'name'>;
  };
  warriorRetreated: {
    /**
     * {​n​a​m​e​}​ ​h​a​s​ ​l​e​f​t​ ​t​h​e​ ​g​a​m​e
     * @param {unknown} name
     */
    true: RequiredParams<'name'>;
    /**
     * {​n​a​m​e​}​ ​h​a​s​ ​r​e​t​r​e​a​t​e​d​ ​f​r​o​m​ ​t​h​e​ ​b​a​t​t​l​e
     * @param {unknown} name
     */
    false: RequiredParams<'name'>;
  };
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​P​l​a​n​ ​s​k​i​p​p​e​d​,​ ​t​r​u​e​:​S​t​o​r​y​ ​s​k​i​p​p​e​d​}​}
   * @param {'false' | 'true'} friendly
   */
  planSkipped: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​n​a​m​e​}​ ​h​a​s​ ​v​o​t​e​d
   * @param {unknown} name
   */
  warriorVoted: RequiredParams<'name'>;
  /**
   * {​n​a​m​e​}​ ​h​a​s​ ​r​e​t​r​a​c​t​e​d​ ​v​o​t​e
   * @param {unknown} name
   */
  warriorRetractedVote: RequiredParams<'name'>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​B​a​t​t​l​e​ ​d​e​l​e​t​e​d​,​ ​t​r​u​e​:​G​a​m​e​ ​d​e​l​e​t​e​d​}​}
   * @param {'false' | 'true'} friendly
   */
  battleDeleted: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * p​s​t​.​.​.​ ​{​n​a​m​e​}​,​ ​w​a​i​t​i​n​g​ ​o​n​ ​y​o​u​ ​t​o​ ​v​o​t​e​.
   * @param {unknown} name
   */
  warriorNudgeMessage: RequiredParams<'name'>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​B​a​t​t​l​e​,​ ​t​r​u​e​:​G​a​m​e​}​}
   * @param {'false' | 'true'} friendly
   */
  battle: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​W​a​r​r​i​o​r​s​,​ ​t​r​u​e​:​P​l​a​y​e​r​s​}​}
   * @param {'false' | 'true'} friendly
   */
  warriors: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​O​o​o​p​s​ ​r​e​l​o​a​d​i​n​g​ ​B​a​t​t​l​e​ ​P​l​a​n​s​.​.​.​,​ ​t​r​u​e​:​O​o​o​p​s​ ​r​e​l​o​a​d​i​n​g​ ​G​a​m​e​.​.​.​}​}
   * @param {'false' | 'true'} friendly
   */
  battleSocketReconnecting: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​r​r​o​r​ ​j​o​i​n​i​n​g​ ​b​a​t​t​l​e​ ​r​e​f​r​e​s​h​ ​a​n​d​ ​t​r​y​ ​a​g​a​i​n​.​,​ ​t​r​u​e​:​E​r​r​o​r​ ​j​o​i​n​i​n​g​ ​g​a​m​e​ ​r​e​f​r​e​s​h​ ​a​n​d​ ​t​r​y​ ​a​g​a​i​n​.​}​}
   * @param {'false' | 'true'} friendly
   */
  battleSocketError: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​L​o​a​d​i​n​g​ ​B​a​t​t​l​e​ ​P​l​a​n​s​.​.​.​,​ ​t​r​u​e​:​L​o​a​d​i​n​g​ ​G​a​m​e​.​.​.​}​}
   * @param {'false' | 'true'} friendly
   */
  battleLoading: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * V​o​t​i​n​g​ ​n​o​t​ ​s​t​a​r​t​e​d
   */
  votingNotStarted: string;
  /**
   * P​a​s​s​w​o​r​d
   */
  password: string;
  /**
   * E​n​t​e​r​ ​a​ ​p​a​s​s​w​o​r​d
   */
  passwordPlaceholder: string;
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​p​a​s​s​w​o​r​d
   */
  yourPasswordPlaceholder: string;
  /**
   * C​o​n​f​i​r​m​ ​P​a​s​s​w​o​r​d
   */
  confirmPassword: string;
  /**
   * C​o​n​f​i​r​m​ ​y​o​u​r​ ​p​a​s​s​w​o​r​d
   */
  confirmPasswordPlaceholder: string;
  /**
   * U​p​d​a​t​e
   */
  update: string;
  /**
   * R​e​s​e​t
   */
  reset: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​r​e​s​e​t​ ​p​a​s​s​w​o​r​d
   */
  passwordResetError: string;
  /**
   * R​e​s​e​t​ ​P​a​s​s​w​o​r​d
   */
  resetPassword: string;
  /**
   * F​o​r​g​o​t​ ​P​a​s​s​w​o​r​d​?
   */
  forgotPasswordCheckboxLabel: string;
  /**
   * R​e​g​i​s​t​e​r​ ​a​s​ ​G​u​e​s​t
   */
  registerAsGuest: string;
  /**
   * R​e​g​i​s​t​r​a​t​i​o​n​ ​i​s​ ​d​i​s​a​b​l​e​d​.
   */
  registrationDisabled: string;
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​n​a​m​e
   */
  userNamePlaceholder: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​t​r​y​i​n​g​ ​t​o​ ​r​e​g​i​s​t​e​r​ ​a​s​ ​g​u​e​s​t
   */
  guestRegisterError: string;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​t​r​y​i​n​g​ ​t​o​ ​r​e​g​i​s​t​e​r​ ​a​c​c​o​u​n​t
   */
  registerError: string;
  /**
   * E​n​l​i​s​t​ ​t​o​ ​B​a​t​t​l​e
   */
  enlistToBattle: string;
  loginForBattle: {
    /**
     * o​r​ ​{​l​o​g​i​n​O​p​e​n​}​L​o​g​i​n​{​l​o​g​i​n​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​G​a​m​e
     * @param {unknown} loginClose
     * @param {unknown} loginOpen
     */
    true: RequiredParams<'loginClose' | 'loginOpen'>;
    /**
     * o​r​ ​{​l​o​g​i​n​O​p​e​n​}​L​o​g​i​n​{​l​o​g​i​n​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​B​a​t​t​l​e
     * @param {unknown} loginClose
     * @param {unknown} loginOpen
     */
    false: RequiredParams<'loginClose' | 'loginOpen'>;
  };
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​n​a​m​e
   */
  yourNamePlaceholder: string;
  /**
   * C​r​e​a​t​e​ ​a​n​ ​A​c​c​o​u​n​t​ ​{​o​p​t​i​o​n​a​l​O​p​e​n​}​(​o​p​t​i​o​n​a​l​)​{​o​p​t​i​o​n​a​l​C​l​o​s​e​}
   * @param {unknown} optionalClose
   * @param {unknown} optionalOpen
   */
  createAccountFormTitle: RequiredParams<'optionalClose' | 'optionalOpen'>;
  /**
   * P​a​s​s​w​o​r​d​ ​r​e​s​e​t​ ​i​n​s​t​r​u​c​t​i​o​n​s​ ​s​e​n​t​ ​t​o​ ​{​e​m​a​i​l​}
   * @param {unknown} email
   */
  sendResetPasswordSuccess: RequiredParams<'email'>;
  /**
   * E​r​r​o​r​ ​e​n​c​o​u​n​t​e​r​e​d​ ​a​t​t​e​m​p​t​i​n​g​ ​t​o​ ​s​e​n​d​ ​p​a​s​s​w​o​r​d​ ​r​e​s​e​t
   */
  sendResetPasswordError: string;
  registerForBattle: {
    /**
     * o​r​ ​{​r​e​g​i​s​t​e​r​O​p​e​n​}​R​e​g​i​s​t​e​r​{​r​e​g​i​s​t​e​r​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​G​a​m​e
     * @param {unknown} registerClose
     * @param {unknown} registerOpen
     */
    true: RequiredParams<'registerClose' | 'registerOpen'>;
    /**
     * o​r​ ​{​r​e​g​i​s​t​e​r​O​p​e​n​}​R​e​g​i​s​t​e​r​{​r​e​g​i​s​t​e​r​C​l​o​s​e​}​ ​t​o​ ​j​o​i​n​ ​t​h​e​ ​B​a​t​t​l​e
     * @param {unknown} registerClose
     * @param {unknown} registerOpen
     */
    false: RequiredParams<'registerClose' | 'registerOpen'>;
  };
  /**
   * C​h​o​o​s​e​ ​y​o​u​r​ ​c​o​u​n​t​r​y​ ​(​o​p​t​i​o​n​a​l​)
   */
  chooseCountryPlaceholder: string;
  /**
   * L​o​c​a​l​e
   */
  locale: string;
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​c​o​m​p​a​n​y​ ​(​o​p​t​i​o​n​a​l​)
   */
  companyPlaceholder: string;
  /**
   * J​o​b​ ​T​i​t​l​e
   */
  jobTitle: string;
  /**
   * E​n​t​e​r​ ​y​o​u​r​ ​j​o​b​ ​t​i​t​l​e​ ​(​o​p​t​i​o​n​a​l​)
   */
  jobTitlePlaceholder: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​E​n​a​b​l​e​ ​b​a​t​t​l​e​ ​n​o​t​i​f​i​c​a​t​i​o​n​s​,​ ​t​r​u​e​:​E​n​a​b​l​e​ ​g​a​m​e​ ​n​o​t​i​f​i​c​a​t​i​o​n​s​}​}
   * @param {'false' | 'true'} friendly
   */
  enableBattleNotifications: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * A​v​a​t​a​r
   */
  avatar: string;
  /**
   * U​p​d​a​t​e​ ​P​r​o​f​i​l​e
   */
  updateProfile: string;
  /**
   * G​u​e​s​t​ ​U​s​e​r​s
   */
  guestUsers: string;
  /**
   * M​a​i​n​t​e​n​a​n​c​e
   */
  maintenance: string;
  /**
   * C​l​e​a​n​ ​G​u​e​s​t​s​ ​o​l​d​e​r​ ​t​h​a​n​ ​{​d​a​y​s​O​l​d​}​ ​d​a​y​s
   * @param {unknown} daysOld
   */
  cleanGuests: RequiredParams<'daysOld'>;
  cleanBattles: {
    /**
     * C​l​e​a​n​ ​G​a​m​e​s​ ​o​l​d​e​r​ ​t​h​a​n​ ​{​d​a​y​s​O​l​d​}​ ​d​a​y​s
     * @param {unknown} daysOld
     */
    true: RequiredParams<'daysOld'>;
    /**
     * C​l​e​a​n​ ​B​a​t​t​l​e​s​ ​o​l​d​e​r​ ​t​h​a​n​ ​{​d​a​y​s​O​l​d​}​ ​d​a​y​s
     * @param {unknown} daysOld
     */
    false: RequiredParams<'daysOld'>;
  };
  /**
   * C​h​o​o​s​e​ ​y​o​u​r​ ​p​r​e​f​e​r​r​e​d​ ​l​o​c​a​l​e​ ​(​o​p​t​i​o​n​a​l​)
   */
  chooseLocalePlaceholder: string;
  /**
   * {​f​r​i​e​n​d​l​y​|​{​f​a​l​s​e​:​I​m​p​o​r​t​ ​P​l​a​n​s​,​ ​t​r​u​e​:​I​m​p​o​r​t​ ​S​t​o​r​i​e​s​}​}
   * @param {'false' | 'true'} friendly
   */
  importPlans: RequiredParams<`friendly|{false:${string}, true:${string}}`>;
  /**
   * S​e​l​e​c​t​ ​f​i​l​e​.​.​.
   */
  selectFile: string;
};

export type TranslationFunctions = {
  /**
   * Abandoned
   */
  abandoned: () => LocalizedString;
  /**
   * Action Comments
   */
  actionComments: () => LocalizedString;
  /**
   * Action Item
   */
  actionItem: () => LocalizedString;
  /**
   * Action item...
   */
  actionItemPlaceholder: () => LocalizedString;
  /**
   * Action Items
   */
  actionItems: () => LocalizedString;
  /**
   * Add action items, you can no longer group or vote comments
   */
  actionPhaseDescription: () => LocalizedString;
  /**
   * Actions
   */
  actions: () => LocalizedString;
  /**
   * Activate
   */
  activate: () => LocalizedString;
  /**
   * Active
   */
  active: () => LocalizedString;
  /**
   * Active Retros
   */
  activeRetros: () => LocalizedString;
  /**
   * Active Retro Users
   */
  activeRetroUsers: () => LocalizedString;
  /**
   * Active Storyboards
   */
  activeStoryboards: () => LocalizedString;
  /**
   * Active Storyboard Users
   */
  activeStoryboardUsers: () => LocalizedString;
  /**
   * Add Comment
   */
  addComment: () => LocalizedString;
  /**
   * Add Persona
   */
  addPersona: () => LocalizedString;
  /**
   * Admin
   */
  admin: () => LocalizedString;
  /**
   * Clean Retros older than {daysOld} days
   */
  adminCleanOldRetros: (arg: { daysOld: unknown }) => LocalizedString;
  /**
   * Clean Storyboards older than {daysOld} days
   */
  adminCleanOldStoryboards: (arg: { daysOld: unknown }) => LocalizedString;
  /**
   * Admin
   */
  adminPageAdmin: () => LocalizedString;
  /**
   * Alerts
   */
  adminPageAlerts: () => LocalizedString;
  /**
   * API Keys
   */
  adminPageApi: () => LocalizedString;
  /**
   * Organizations
   */
  adminPageOrganizations: () => LocalizedString;
  /**
   * Teams
   */
  adminPageTeams: () => LocalizedString;
  /**
   * Users
   */
  adminPageUsers: () => LocalizedString;
  /**
   * Allow Dismiss
   */
  alertAllowDismiss: () => LocalizedString;
  /**
   * Alert Content
   */
  alertContent: () => LocalizedString;
  /**
   * Enter alert content
   */
  alertContentPlaceholder: () => LocalizedString;
  /**
   * Create Alert
   */
  alertCreate: () => LocalizedString;
  /**
   * Delete Alert
   */
  alertDelete: () => LocalizedString;
  /**
   * Are you sure you want to delete this alert?
   */
  alertDeleteConfirmation: () => LocalizedString;
  /**
   * Enter an alert name
   */
  alertNamePlaceholder: () => LocalizedString;
  /**
   * Registered Only
   */
  alertRegisteredOnly: () => LocalizedString;
  /**
   * Alerts
   */
  alerts: () => LocalizedString;
  /**
   * Save Alert
   */
  alertSave: () => LocalizedString;
  /**
   * Select an alert type
   */
  alertTypePlaceholder: () => LocalizedString;
  /**
   * All votes in
   */
  allVotesIn: () => LocalizedString;
  /**
   * API Documentation
   */
  apiDocumentation: () => LocalizedString;
  /**
   * Couldn't copy API key to clipboard
   */
  apikeyCopyFailure: () => LocalizedString;
  /**
   * API key copied to clipboard
   */
  apikeyCopySuccess: () => LocalizedString;
  /**
   * API Keys
   */
  apiKeys: () => LocalizedString;
  /**
   * Error getting application stats
   */
  applicationStatsError: () => LocalizedString;
  /**
   * Thunderdome
   */
  appName: () => LocalizedString;
  /**
   * Preview of Thunderdome, Agile Planning Poker UI Experience
   */
  appPreviewAlt: () => LocalizedString;
  /**
   * Open Source Agile Planning Poker app
   */
  appSubtitle: () => LocalizedString;
  /**
   * Version {version}
   */
  appVersion: (arg: { version: unknown }) => LocalizedString;
  /**
   * Associate Team
   */
  associateTeam: () => LocalizedString;
  /**
   * {friendly|{false:Error encountered attempting to authenticate warrior, true:Error encountered attempting to authenticate user}}
   */
  authError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Auto Finish Voting
   */
  autoFinishVoting: () => LocalizedString;
  /**
   * Placeholder Avatar
   */
  avatarAltText: () => LocalizedString;
  /**
   * Back
   */
  back: () => LocalizedString;
  /**
   * {friendly|{false:Abandon Battle, true:Abandon Game}}
   */
  battleAbandon: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Create Battle, true:Create Game}}
   */
  battleCreate: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Delete Battle, true:Delete Game}}
   */
  battleDelete: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Edit Battle, true:Edit Game}}
   */
  battleEdit: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Voting is active, cannot modify allowed points.
   */
  battleEditPointsDisabled: () => LocalizedString;
  /**
   * {friendly|{false:Join Battle, true:Join Game}}
   */
  battleJoin: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Battle Name, true:Game Name}}
   */
  battleName: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Error attempting to remove battle., true:Error attempting to remove game.}}
   */
  battleRemoveError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Battle removed successfully., true:Game removed successfully.}}
   */
  battleRemoveSuccess: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Battles, true:Games}}
   */
  battles: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Active Battles, true:Active Games}}
   */
  battlesActive: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Active Battle Users, true:Active Story Users}}
   */
  battlesActiveUsers: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Become Facilitator
   */
  becomeFacilitator: () => LocalizedString;
  /**
   * Become Leader
   */
  becomeLeader: () => LocalizedString;
  /**
   * Become Participant
   */
  becomeParticipant: () => LocalizedString;
  /**
   * Become Spectator
   */
  becomeSpectator: () => LocalizedString;
  /**
   * Blocked
   */
  blocked: () => LocalizedString;
  /**
   * Blockers
   */
  blockers: () => LocalizedString;
  /**
   * I'm blocked by...
   */
  blockersPlaceholder: () => LocalizedString;
  /**
   * Brainstorm
   */
  brainstorm: () => LocalizedString;
  /**
   * Add your comments below
   */
  brainstormPhaseDescription: () => LocalizedString;
  /**
   * Brainstorm Phase Feedback Visibility
   */
  brainstormPhaseFeedbackVisibility: () => LocalizedString;
  /**
   * Feedback Concealed
   */
  brainstormVisibilityLabelConcealed: () => LocalizedString;
  /**
   * Feedback Hidden
   */
  brainstormVisibilityLabelHidden: () => LocalizedString;
  /**
   * Feedback Visible
   */
  brainstormVisibilityLabelVisible: () => LocalizedString;
  /**
   * Cancel
   */
  cancel: () => LocalizedString;
  /**
   * This cannot be undone.
   */
  cannotBeUndone: () => LocalizedString;
  /**
   * Check In
   */
  checkIn: () => LocalizedString;
  /**
   * Error deleting check in comment
   */
  checkinCommentDeleteError: () => LocalizedString;
  /**
   * Error commenting on check in
   */
  checkinCommentError: () => LocalizedString;
  /**
   * Error checking in
   */
  checkinError: () => LocalizedString;
  /**
   * Did you meet yesterday's goals?
   */
  checkinMeetYesterdayGoalsQuestion: () => LocalizedString;
  /**
   * Checkins
   */
  checkins: () => LocalizedString;
  /**
   * Color Legend
   */
  colorLegend: () => LocalizedString;
  /**
   * legend not specified
   */
  colorLegendNotSpecified: () => LocalizedString;
  /**
   * Comment
   */
  comment: () => LocalizedString;
  /**
   * Comments
   */
  comments: () => LocalizedString;
  /**
   * Completed
   */
  completed: () => LocalizedString;
  /**
   * Concise Voting Results
   */
  conciseVotingResults: () => LocalizedString;
  /**
   * Are you sure you want to delete this retrospective?
   */
  confirmDeleteRetro: () => LocalizedString;
  /**
   * Create Account
   */
  createAccount: () => LocalizedString;
  /**
   * Error encountered creating alert
   */
  createAlertError: () => LocalizedString;
  /**
   * Alert created successfully
   */
  createAlertSuccess: () => LocalizedString;
  /**
   * Create a Retro
   */
  createARetro: () => LocalizedString;
  /**
   * Create a Storyboard
   */
  createAStoryboard: () => LocalizedString;
  /**
   * {friendly|{false:Error encountered creating battle, true:Error encountered creating game}}
   */
  createBattleError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error attempting to create organization
   */
  createOrgError: () => LocalizedString;
  /**
   * Create Retro
   */
  createRetro: () => LocalizedString;
  /**
   * Error encountered creating retro
   */
  createRetroErrorMessage: () => LocalizedString;
  /**
   * Create Storyboard
   */
  createStoryboard: () => LocalizedString;
  /**
   * Error encountered creating user
   */
  createUserError: () => LocalizedString;
  /**
   * {friendly|{false:Customizable Battle Options, true:Customizable Game Options}}
   */
  customizableBattleOptions: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * Created Date
   */
  dateCreated: () => LocalizedString;
  /**
   * Updated Date
   */
  dateUpdated: () => LocalizedString;
  /**
   * Delete
   */
  delete: () => LocalizedString;
  /**
   * Error deleting action item
   */
  deleteActionItemError: () => LocalizedString;
  /**
   * Action item deleted successfully
   */
  deleteActionItemSuccess: () => LocalizedString;
  /**
   * Error attempting to delete alert
   */
  deleteAlertError: () => LocalizedString;
  /**
   * Alert deleted successfully
   */
  deleteAlertSuccess: () => LocalizedString;
  /**
   * {friendly|{false:Delete Battle, true:Delete Game}}
   */
  deleteBattle: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Are you sure you want to delete this battle?, true:Are you sure you want to delete this game?}}
   */
  deleteBattleConfirmText: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * {friendly|{false:error deleting battle, true:error deleting game}}
   */
  deleteBattleError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error deleting check in
   */
  deleteCheckinError: () => LocalizedString;
  /**
   * Delete Department
   */
  deleteDepartment: () => LocalizedString;
  /**
   * Are you sure you want to delete this department?
   */
  deleteDepartmentConfirmText: () => LocalizedString;
  /**
   * Delete Organization
   */
  deleteOrganization: () => LocalizedString;
  /**
   * Are you sure you want to delete this organization?
   */
  deleteOrganizationConfirmText: () => LocalizedString;
  /**
   * Delete Retro
   */
  deleteRetro: () => LocalizedString;
  /**
   * error deleting retro
   */
  deleteRetroErrorMessage: () => LocalizedString;
  /**
   * Delete Storyboard
   */
  deleteStoryboard: () => LocalizedString;
  /**
   * error deleting storyboard
   */
  deleteStoryboardErrorMessage: () => LocalizedString;
  /**
   * Delete Team
   */
  deleteTeam: () => LocalizedString;
  /**
   * Are you sure you want to delete this team?
   */
  deleteTeamConfirmText: () => LocalizedString;
  /**
   * Error encountered deleting user
   */
  deleteUserError: () => LocalizedString;
  /**
   * Demote
   */
  demote: () => LocalizedString;
  /**
   * Error encountered demoting user
   */
  demoteUserError: () => LocalizedString;
  /**
   * Department
   */
  department: () => LocalizedString;
  /**
   * Create Department
   */
  departmentCreate: () => LocalizedString;
  /**
   * Error attempting to create department
   */
  departmentCreateError: () => LocalizedString;
  /**
   * Error attempting to delete department
   */
  departmentDeleteError: () => LocalizedString;
  /**
   * Department deleted successfully.
   */
  departmentDeleteSuccess: () => LocalizedString;
  /**
   * Error getting department
   */
  departmentGetError: () => LocalizedString;
  /**
   * Department Name
   */
  departmentName: () => LocalizedString;
  /**
   * Enter an department name
   */
  departmentNamePlaceholder: () => LocalizedString;
  /**
   * Departments
   */
  departments: () => LocalizedString;
  /**
   * Save Department
   */
  departmentSave: () => LocalizedString;
  /**
   * Error getting department teams
   */
  departmentTeamsGetError: () => LocalizedString;
  /**
   * Error getting department users
   */
  departmentUsersGetError: () => LocalizedString;
  /**
   * Discuss
   */
  discuss: () => LocalizedString;
  /**
   * I would like to discuss...
   */
  discussPlaceholder: () => LocalizedString;
  /**
   * Done
   */
  done: () => LocalizedString;
  /**
   * Duplicate retro session exists for your ID
   */
  duplicateRetroSession: () => LocalizedString;
  /**
   * Duplicate storyboard session exists for your ID
   */
  duplicateStoryboardSession: () => LocalizedString;
  /**
   * Edit
   */
  edit: () => LocalizedString;
  /**
   * Edit Legend
   */
  editColorLegend: () => LocalizedString;
  /**
   * Edit Retro
   */
  editRetro: () => LocalizedString;
  /**
   * Edit Storyboard
   */
  editStoryboard: () => LocalizedString;
  /**
   * Email
   */
  email: () => LocalizedString;
  /**
   * Enter passcode...
   */
  enterPasscode: () => LocalizedString;
  /**
   * Enter your email
   */
  enterYourEmail: () => LocalizedString;
  /**
   * Execute
   */
  execute: () => LocalizedString;
  /**
   * Export
   */
  export: () => LocalizedString;
  /**
   * Facilitator
   */
  facilitator: () => LocalizedString;
  /**
   * Facilitator Code
   */
  facilitatorCode: () => LocalizedString;
  /**
   * Facilitator Code (Optional)
   */
  facilitatorCodeOptional: () => LocalizedString;
  /**
   * Enter an optional facilitator code
   */
  facilitatorCodePlaceholder: () => LocalizedString;
  /**
   * Final Points
   */
  finalPoints: () => LocalizedString;
  /**
   * Flag
   */
  flag: () => LocalizedString;
  /**
   * is designed and developed by {authorOpen}Steven Weathers{authorClose}.
   */
  footerAuthoredBy: (arg: {
    authorClose: unknown;
    authorOpen: unknown;
  }) => LocalizedString;
  /**
   * The source code is licensed {licenseOpen}Apache 2.0{licenseClose}.
   */
  footerLicense: (arg: {
    licenseClose: unknown;
    licenseOpen: unknown;
  }) => LocalizedString;
  /**
   * Forgot Password
   */
  forgotPassword: () => LocalizedString;
  /**
   * Error getting alerts
   */
  getAlertsError: () => LocalizedString;
  /**
   * Error getting apikeys
   */
  getApikeysError: () => LocalizedString;
  /**
   * {friendly|{false:Error getting battle, true:Error getting game}}
   */
  getBattleError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Error getting battles, true:Error getting games}}
   */
  getBattlesError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error getting check in's
   */
  getCheckinsError: () => LocalizedString;
  /**
   * Error getting organizations
   */
  getOrganizationsError: () => LocalizedString;
  /**
   * error getting retro
   */
  getRetroErrorMessage: () => LocalizedString;
  /**
   * error getting retros
   */
  getRetrosErrorMessage: () => LocalizedString;
  /**
   * error getting storyboard
   */
  getStoryboardErrorMessage: () => LocalizedString;
  /**
   * error getting storyboards
   */
  getStoryboardsErrorMessage: () => LocalizedString;
  /**
   * Error getting teams
   */
  getTeamsError: () => LocalizedString;
  /**
   * Error getting user
   */
  getUserError: () => LocalizedString;
  /**
   * Error getting users
   */
  getUsersError: () => LocalizedString;
  /**
   * Goals Met
   */
  goalsMet: () => LocalizedString;
  /**
   * Group
   */
  group: () => LocalizedString;
  /**
   * Group Name
   */
  groupName: () => LocalizedString;
  /**
   * Drag and drop comments to group them together
   */
  groupPhaseDescription: () => LocalizedString;
  /**
   * {linkOpen}Thunderdome.dev{linkClose} is a free hosted service (SaaS) without Ads.
   */
  hostedDesc: (arg: {
    linkClose: unknown;
    linkOpen: unknown;
  }) => LocalizedString;
  /**
   * Hosted service or self-hosted
   */
  hostedOrSelfHosted: () => LocalizedString;
  /**
   * {friendly|{false:Import plans from a CSV file, true:Import stories from a CSV file}}
   */
  importCsv: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error bad file type
   */
  importCsvFileBadFileTypeError: () => LocalizedString;
  /**
   * Error reading file
   */
  importCsvFileReadFileError: () => LocalizedString;
  /**
   * {friendly|{false:Import plans from Jira XML, true:Import stories from Jira XML}}
   */
  importJiraXML: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error bad file type
   */
  importJiraXMLBadFileTypeError: () => LocalizedString;
  /**
   * Error reading file
   */
  importJiraXMLReadFileError: () => LocalizedString;
  /**
   * Incorrect passcode
   */
  incorrectPassCode: () => LocalizedString;
  /**
   * Couldn't copy invite link to clipboard
   */
  inviteLinkCopyFailure: () => LocalizedString;
  /**
   * Invite Link copied to clipboard
   */
  inviteLinkCopySuccess: () => LocalizedString;
  /**
   * Jira XML Import
   */
  jiraXmlImport: () => LocalizedString;
  /**
   * Couldn't copy passcode to clipboard
   */
  joinCodeCopyFailure: () => LocalizedString;
  /**
   * Passcode copied to clipboard
   */
  joinCodeCopySuccess: () => LocalizedString;
  /**
   * Join Code (Optional)
   */
  joinCodeLabelOptional: () => LocalizedString;
  /**
   * Enter a join code
   */
  joinCodePlaceholder: () => LocalizedString;
  /**
   * Join Retro
   */
  joinRetro: () => LocalizedString;
  /**
   * Join Storyboard
   */
  joinStoryboard: () => LocalizedString;
  /**
   * Error joining storyboard, refresh and try again.
   */
  joinStoryboardError: () => LocalizedString;
  landingCountries: {
    /**
     * Users in over {count} countries
     */
    true: (arg: { count: unknown }) => LocalizedString;
    /**
     * Warriors in over {count} countries
     */
    false: (arg: { count: unknown }) => LocalizedString;
  };
  /**
   * Check out the {repoOpen}Github repository{repoClose} to request or contribute enhancements, locale translations and bug fixes or to {donateOpen}Donate{donateClose}.
   */
  landingFeatureOpenSourceText: (arg: {
    donateClose: unknown;
    donateOpen: unknown;
    repoClose: unknown;
    repoOpen: unknown;
  }) => LocalizedString;
  /**
   * Open Source
   */
  landingFeatureOpenSourceTitle: () => LocalizedString;
  /**
   * Remote team collaboration with realtime agile story pointing, no cost and ad free!
   */
  landingSalesPitch: () => LocalizedString;
  /**
   * {friendly|{false:Thunderdome is an Agile Planning Poker app with a fun theme, true:Thunderdome is an Agile Planning Poker app}}
   */
  landingTitle: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Last Active
   */
  lastActive: () => LocalizedString;
  /**
   * Leader
   */
  leader: () => LocalizedString;
  /**
   * Leader code
   */
  leaderPasscode: () => LocalizedString;
  /**
   * Leave Retro
   */
  leaveRetro: () => LocalizedString;
  /**
   * Leave Storyboard
   */
  leaveStoryboard: () => LocalizedString;
  /**
   * Enter a color legend
   */
  legendRetroPlaceholder: () => LocalizedString;
  /**
   * Loading Retro...
   */
  loadingRetro: () => LocalizedString;
  /**
   * Loading Storyboard...
   */
  loadingStoryboard: () => LocalizedString;
  /**
   * Login
   */
  login: () => LocalizedString;
  /**
   * or {loginOpen}Login{loginClose} to join the Retro
   */
  loginForRetro: (arg: {
    loginClose: unknown;
    loginOpen: unknown;
  }) => LocalizedString;
  /**
   * or {loginOpen}Login{loginClose} to join the Storyboard
   */
  loginForStoryboard: (arg: {
    loginClose: unknown;
    loginOpen: unknown;
  }) => LocalizedString;
  /**
   * Logout
   */
  logout: () => LocalizedString;
  /**
   * {friendly|{false:Error encountered attempting to logout warrior, true:Error encountered attempting to logout user}}
   */
  logoutError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error encountered lowercasing user emails
   */
  lowercaseEmailsError: () => LocalizedString;
  /**
   * Lowercased user emails successfully
   */
  lowercaseEmailsSuccess: () => LocalizedString;
  /**
   * Lowercase User Emails
   */
  maintenanceLowercaseEmails: () => LocalizedString;
  /**
   * Make Facilitator
   */
  makeFacilitator: () => LocalizedString;
  /**
   * 2FA/MFA Auth
   */
  mfa2faLabel: () => LocalizedString;
  /**
   * Remove 2FA/MFA
   */
  mfa2faRemove: () => LocalizedString;
  /**
   * Failed to remove 2FA/MFA
   */
  mfa2faRemoveFailure: () => LocalizedString;
  /**
   * 2FA/MFA successfully removed
   */
  mfa2faRemoveSuccess: () => LocalizedString;
  /**
   * Are you sure you want to remove 2FA/MFA?
   */
  mfa2faRemoveText: () => LocalizedString;
  /**
   * Setup 2FA/MFA
   */
  mfa2faSetup: () => LocalizedString;
  /**
   * Error validating authenticator token
   */
  mfaAuthError: () => LocalizedString;
  /**
   * Confirm Token
   */
  mfaConfirmToken: () => LocalizedString;
  /**
   * failed to start 2FA/MFA setup
   */
  mfaGenerateFailed: () => LocalizedString;
  /**
   * Secret Key
   */
  mfaSecretKeyLabel: () => LocalizedString;
  /**
   * failed to validate 2FA/MFA setup token
   */
  mfaSetupFailed: () => LocalizedString;
  /**
   * Scan the following QR code with an Authenticator Application (such as Google Authenticator or Authy) and enter the generated token.
   */
  mfaSetupIntro: () => LocalizedString;
  /**
   * successfully enabled 2FA/MFA
   */
  mfaSetupSuccess: () => LocalizedString;
  /**
   * Authenticator Token
   */
  mfaTokenLabel: () => LocalizedString;
  /**
   * Enter token from authenticator app
   */
  mfaTokenPlaceholder: () => LocalizedString;
  /**
   * My Retros
   */
  myRetros: () => LocalizedString;
  /**
   * My Storyboards
   */
  myStoryboards: () => LocalizedString;
  /**
   * Name
   */
  name: () => LocalizedString;
  /**
   * Needs Improvement
   */
  needsImprovement: () => LocalizedString;
  /**
   * Next Phase
   */
  nextPhase: () => LocalizedString;
  /**
   * No comments...
   */
  noComments: () => LocalizedString;
  /**
   * {friendly|{false:Error encountered cleaning battles, true:Error encountered cleaning games}}
   */
  oldBattleCleanError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error encountered cleaning guests
   */
  oldGuestsCleanError: () => LocalizedString;
  /**
   * Error encountered cleaning retros
   */
  oldRetrosCleanError: () => LocalizedString;
  /**
   * Error encountered cleaning storyboards
   */
  oldStoryboardsCleanError: () => LocalizedString;
  /**
   * Open Source
   */
  openSource: () => LocalizedString;
  /**
   * (Optional)
   */
  optional: () => LocalizedString;
  /**
   * Optional leader code to become a leader
   */
  optionalLeadercodePlaceholder: () => LocalizedString;
  /**
   * Optional passcode to join
   */
  optionalPasscodePlaceholder: () => LocalizedString;
  /**
   * Organization
   */
  organization: () => LocalizedString;
  /**
   * Create Organization
   */
  organizationCreate: () => LocalizedString;
  /**
   * Error attempting to delete organization
   */
  organizationDeleteError: () => LocalizedString;
  /**
   * Organization deleted successfully.
   */
  organizationDeleteSuccess: () => LocalizedString;
  /**
   * Error getting organization departments
   */
  organizationGetDepartmentsError: () => LocalizedString;
  /**
   * Error getting organization
   */
  organizationGetError: () => LocalizedString;
  /**
   * Error getting organization teams
   */
  organizationGetTeamsError: () => LocalizedString;
  /**
   * Error getting organization users
   */
  organizationGetUsersError: () => LocalizedString;
  /**
   * Organization Name
   */
  organizationName: () => LocalizedString;
  /**
   * Enter an organization name
   */
  organizationNamePlaceholder: () => LocalizedString;
  /**
   * Organizations
   */
  organizations: () => LocalizedString;
  /**
   * Organizations and Teams
   */
  organizationsAndTeams: () => LocalizedString;
  /**
   * Save Organization
   */
  organizationSave: () => LocalizedString;
  /**
   * Owner
   */
  owner: () => LocalizedString;
  /**
   * Participation
   */
  participation: () => LocalizedString;
  /**
   * Passcode
   */
  passCode: () => LocalizedString;
  /**
   * Passcode required to join
   */
  passCodeRequired: () => LocalizedString;
  /**
   * Persona's
   */
  personas: () => LocalizedString;
  /**
   * Acceptance Criteria
   */
  planAcceptanceCriteria: () => LocalizedString;
  /**
   * Enter acceptance criteria
   */
  planAcceptanceCriteriaPlaceholder: () => LocalizedString;
  /**
   * {friendly|{false:Add Plan, true:Add Stories}}
   */
  planAdd: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Description
   */
  planDescription: () => LocalizedString;
  /**
   * Enter a description
   */
  planDescriptionPlaceholder: () => LocalizedString;
  /**
   * Link
   */
  planLink: () => LocalizedString;
  /**
   * Link isn't a valid absolute URL, e.g. includes protocol (HTTP/HTTPS)
   */
  planLinkInvalid: () => LocalizedString;
  /**
   * {friendly|{false:Enter a link to plan, true:Enter a link to story}}
   */
  planLinkPlaceholder: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Plan Name, true:Story Name}}
   */
  planName: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Enter a plan name, true:Enter a story name}}
   */
  planNamePlaceholder: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Priority
   */
  planPriority: () => LocalizedString;
  /**
   * Blocker
   */
  planPriorityBlocker: () => LocalizedString;
  /**
   * High
   */
  planPriorityHigh: () => LocalizedString;
  /**
   * Highest
   */
  planPriorityHighest: () => LocalizedString;
  /**
   * Low
   */
  planPriorityLow: () => LocalizedString;
  /**
   * Lowest
   */
  planPriorityLowest: () => LocalizedString;
  /**
   * Medium
   */
  planPriorityMedium: () => LocalizedString;
  /**
   * Select a priority
   */
  planPriorityPlaceholder: () => LocalizedString;
  /**
   * Reference ID
   */
  planReferenceId: () => LocalizedString;
  /**
   * Enter a reference ID
   */
  planReferenceIdPlaceholder: () => LocalizedString;
  /**
   * {friendly|{false:Plans, true:Stories}}
   */
  plans: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Skip Plan, true:Skip Story}}
   */
  planSkip: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Plan Type, true:Story Type}}
   */
  planType: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Bug
   */
  planTypeBug: () => LocalizedString;
  /**
   * Epic
   */
  planTypeEpic: () => LocalizedString;
  /**
   * Types
   */
  planTypePlaceholder: () => LocalizedString;
  /**
   * Spike
   */
  planTypeSpike: () => LocalizedString;
  /**
   * Story
   */
  planTypeStory: () => LocalizedString;
  /**
   * Subtask
   */
  planTypeSubtask: () => LocalizedString;
  /**
   * Task
   */
  planTypeTask: () => LocalizedString;
  /**
   * Point Average Rounding
   */
  pointAverageRounding: () => LocalizedString;
  /**
   * Pointed ({count})
   */
  pointed: (arg: { count: unknown }) => LocalizedString;
  /**
   * Points
   */
  points: () => LocalizedString;
  /**
   * Point Values Allowed
   */
  pointValuesAllowed: () => LocalizedString;
  /**
   * Post Comment
   */
  postComment: () => LocalizedString;
  /**
   * Prime Directive
   */
  primeDirective: () => LocalizedString;
  /**
   * Promote
   */
  promote: () => LocalizedString;
  /**
   * Error encountered promoting user
   */
  promoteUserError: () => LocalizedString;
  /**
   * Questions
   */
  questions: () => LocalizedString;
  /**
   * Register
   */
  register: () => LocalizedString;
  /**
   * or {registerOpen}Register{registerClose} to join the Retro
   */
  registerForRetro: (arg: {
    registerClose: unknown;
    registerOpen: unknown;
  }) => LocalizedString;
  /**
   * or {registerOpen}Register{registerClose} to join the Storyboard
   */
  registerForStoryboard: (arg: {
    registerClose: unknown;
    registerOpen: unknown;
  }) => LocalizedString;
  /**
   * Oops, reloading Retro...
   */
  reloadingRetro: () => LocalizedString;
  /**
   * Oops, reloading Storyboard...
   */
  reloadingStoryboard: () => LocalizedString;
  /**
   * Remove
   */
  remove: () => LocalizedString;
  /**
   * {friendly|{false:Remove Battle, true:Remove Game}}
   */
  removeBattle: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Are you sure you want to remove this battle?, true:Are you sure you want to remove this game?}}
   */
  removeBattleConfirmText: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * Remove Retro
   */
  removeRetro: () => LocalizedString;
  /**
   * Are you sure you want to remove this retro?
   */
  removeRetroConfirmText: () => LocalizedString;
  /**
   * Remove Storyboard
   */
  removeStoryboard: () => LocalizedString;
  /**
   * Are you sure you want to remove this storyboard?
   */
  removeStoryboardConfirmText: () => LocalizedString;
  /**
   * Remove User
   */
  removeUser: () => LocalizedString;
  /**
   * Are you sure you want to remove this user?
   */
  removeUserConfirmText: () => LocalizedString;
  /**
   * Request Verification Email
   */
  requestVerifyEmail: () => LocalizedString;
  /**
   * Error attempting to send Verification Email
   */
  requestVerifyEmailFailure: () => LocalizedString;
  /**
   * Verification Email requested, watch your inbox
   */
  requestVerifyEmailSuccess: () => LocalizedString;
  /**
   * Retro
   */
  retro: () => LocalizedString;
  /**
   * error adding retro action comment
   */
  retroActionCommentAddError: () => LocalizedString;
  /**
   * error deleting retro action comment
   */
  retroActionCommentDeleteError: () => LocalizedString;
  /**
   * error editing retro action comment
   */
  retroActionCommentEditError: () => LocalizedString;
  /**
   * Retro Action Items
   */
  retroActionItems: () => LocalizedString;
  /**
   * Error attempting to add retro.
   */
  retroAddError: () => LocalizedString;
  /**
   * Retro added successfully.
   */
  retroAddSuccess: () => LocalizedString;
  /**
   * Retro deleted
   */
  retroDeleted: () => LocalizedString;
  /**
   * Feedback Concealed
   */
  retroFeedbackConcealed: () => LocalizedString;
  /**
   * Feedback Hidden
   */
  retroFeedbackHidden: () => LocalizedString;
  /**
   * What needs improvement...
   */
  retroImprovePlaceholder: () => LocalizedString;
  /**
   * Retro Items
   */
  retroItems: () => LocalizedString;
  /**
   * Error joining retro, refresh and try again.
   */
  retroJoinError: () => LocalizedString;
  /**
   * Max Group Votes (per User)
   */
  retroMaxVotesPerUserLabel: () => LocalizedString;
  /**
   * Retro Name
   */
  retroName: () => LocalizedString;
  /**
   * Enter a retro name
   */
  retroNamePlaceholder: () => LocalizedString;
  /**
   * I want to ask...
   */
  retroQuestionPlaceholder: () => LocalizedString;
  /**
   * Error attempting to remove retro.
   */
  retroRemoveError: () => LocalizedString;
  /**
   * Retro removed successfully.
   */
  retroRemoveSuccess: () => LocalizedString;
  /**
   * Retros
   */
  retros: () => LocalizedString;
  /**
   * What worked well...
   */
  retroWorkedPlaceholder: () => LocalizedString;
  /**
   * Role
   */
  role: () => LocalizedString;
  /**
   * Select users role
   */
  rolePlaceholder: () => LocalizedString;
  /**
   * Save
   */
  save: () => LocalizedString;
  /**
   * Search
   */
  search: () => LocalizedString;
  /**
   * Search value must be at least 3 characters
   */
  searchLengthError: () => LocalizedString;
  /**
   * Select a Team
   */
  selectTeam: () => LocalizedString;
  /**
   * Alternatively you can {linkOpen}run it on your own server{linkClose}.
   */
  selfHostedDesc: (arg: {
    linkClose: unknown;
    linkOpen: unknown;
  }) => LocalizedString;
  /**
   * Send Reset Email
   */
  sendResetEmail: () => LocalizedString;
  /**
   * {friendly|{false:Duplicate battle session exists for your ID, true:Duplicate game session exists for your ID}}
   */
  sessionDuplicate: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Show Active Battles, true:Show Active Games}}
   */
  showActiveBattles: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Show active retros
   */
  showActiveRetros: () => LocalizedString;
  /**
   * Show active storyboards
   */
  showActiveStoryboards: () => LocalizedString;
  /**
   * Show only checkins requiring discussion
   */
  showBlockedCheckins: () => LocalizedString;
  /**
   * Show Completed Action Items
   */
  showCompletedActionItems: () => LocalizedString;
  /**
   * Show Voters
   */
  showVoters: () => LocalizedString;
  /**
   * Skipped
   */
  skipped: () => LocalizedString;
  /**
   * Spectator
   */
  spectator: () => LocalizedString;
  /**
   * Storyboard
   */
  storyboard: () => LocalizedString;
  /**
   * Add Column
   */
  storyboardAddColumn: () => LocalizedString;
  /**
   * Error attempting to add storyboard.
   */
  storyboardAddError: () => LocalizedString;
  /**
   * Add Goal
   */
  storyboardAddGoal: () => LocalizedString;
  /**
   * Add Story to Column
   */
  storyboardAddStoryToColumn: () => LocalizedString;
  /**
   * Storyboard added successfully.
   */
  storyboardAddSuccess: () => LocalizedString;
  /**
   * Storyboard Columns
   */
  storyboardColumns: () => LocalizedString;
  /**
   * Storyboard deleted
   */
  storyboardDeleted: () => LocalizedString;
  /**
   * Edit Column
   */
  storyboardEditColumn: () => LocalizedString;
  /**
   * Goal name
   */
  storyboardGoalName: () => LocalizedString;
  /**
   * Enter a goal name
   */
  storyboardGoalNamePlaceholder: () => LocalizedString;
  /**
   * Storyboard Goals
   */
  storyboardGoals: () => LocalizedString;
  /**
   * Storyboard Personas
   */
  storyboardPersonas: () => LocalizedString;
  /**
   * Error attempting to remove storyboard.
   */
  storyboardRemoveError: () => LocalizedString;
  /**
   * Storyboard removed successfully.
   */
  storyboardRemoveSuccess: () => LocalizedString;
  /**
   * Storyboards
   */
  storyboards: () => LocalizedString;
  /**
   * Storyboard Stories
   */
  storyboardStories: () => LocalizedString;
  /**
   * Team
   */
  team: () => LocalizedString;
  /**
   * Team Checkins
   */
  teamCheckins: () => LocalizedString;
  /**
   * Create Team
   */
  teamCreate: () => LocalizedString;
  /**
   * Error attempting to create team.
   */
  teamCreateError: () => LocalizedString;
  /**
   * Team created successfully.
   */
  teamCreateSuccess: () => LocalizedString;
  /**
   * Error attempting to delete team
   */
  teamDeleteError: () => LocalizedString;
  /**
   * Team deleted successfully.
   */
  teamDeleteSuccess: () => LocalizedString;
  /**
   * {friendly|{false:Error getting team battles, true:Error getting team games}}
   */
  teamGetBattlesError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Error getting team
   */
  teamGetError: () => LocalizedString;
  /**
   * error getting retro actions
   */
  teamGetRetroActionsError: () => LocalizedString;
  /**
   * Error getting team retros
   */
  teamGetRetrosError: () => LocalizedString;
  /**
   * Error getting team storyboards
   */
  teamGetStoryboardsError: () => LocalizedString;
  /**
   * Error getting team users
   */
  teamGetUsersError: () => LocalizedString;
  /**
   * Team Name
   */
  teamName: () => LocalizedString;
  /**
   * Enter an team name
   */
  teamNamePlaceholder: () => LocalizedString;
  /**
   * Teams
   */
  teams: () => LocalizedString;
  /**
   * Save Team
   */
  teamSave: () => LocalizedString;
  /**
   * User must be in team to check in
   */
  teamUserRequiredToCheckin: () => LocalizedString;
  /**
   * User must be in team to comment
   */
  teamUserRequiredToComment: () => LocalizedString;
  /**
   * Today
   */
  today: () => LocalizedString;
  /**
   * Today I will...
   */
  todayPlaceholder: () => LocalizedString;
  /**
   * Total
   */
  totalPoints: () => LocalizedString;
  /**
   * Total Votes
   */
  totalVotes: () => LocalizedString;
  /**
   * Type
   */
  type: () => LocalizedString;
  /**
   * {friendly|{false:Unknown Warrior, true:Unknown Player}}
   */
  unknownWarrior: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Unpointed ({count})
   */
  unpointed: (arg: { count: unknown }) => LocalizedString;
  /**
   * Error updating action item
   */
  updateActionItemError: () => LocalizedString;
  /**
   * Action item updated successfully
   */
  updateActionItemSuccess: () => LocalizedString;
  /**
   * Error encountered updating alert
   */
  updateAlertError: () => LocalizedString;
  /**
   * Alert updating successfully
   */
  updateAlertSuccess: () => LocalizedString;
  /**
   * Error updating check in
   */
  updateCheckinError: () => LocalizedString;
  /**
   * Update Comment
   */
  updateComment: () => LocalizedString;
  /**
   * Add User
   */
  userAdd: () => LocalizedString;
  /**
   * Error attempting to add user.
   */
  userAddError: () => LocalizedString;
  /**
   * User added successfully.
   */
  userAddSuccess: () => LocalizedString;
  /**
   * User Email
   */
  userEmail: () => LocalizedString;
  /**
   * Enter a registered users email
   */
  userEmailPlaceholder: () => LocalizedString;
  /**
   * User Name
   */
  userName: () => LocalizedString;
  /**
   * Error attempting to remove user.
   */
  userRemoveError: () => LocalizedString;
  /**
   * User removed successfully.
   */
  userRemoveSuccess: () => LocalizedString;
  /**
   * Users
   */
  users: () => LocalizedString;
  /**
   * Verify Account
   */
  verifyAccount: () => LocalizedString;
  /**
   * Something went wrong verifying your account, perhaps this link expired or was already used.
   */
  verifyAccountFailedError: () => LocalizedString;
  /**
   * Verification Failed
   */
  verifyAccountFailedTitle: () => LocalizedString;
  /**
   * Verifying Account...
   */
  verifyAccountLoading: () => LocalizedString;
  /**
   * Thanks for verifying your email.
   */
  verifyAccountVerifiedThanks: () => LocalizedString;
  /**
   * Account Verified
   */
  verifyAccountVerifiedTitle: () => LocalizedString;
  /**
   * View
   */
  view: () => LocalizedString;
  /**
   * Vote
   */
  vote: () => LocalizedString;
  /**
   * Vote Count
   */
  voteCount: () => LocalizedString;
  /**
   * Vote for the groups you'd like to discuss most
   */
  votePhaseDescription: () => LocalizedString;
  /**
   * Average
   */
  voteResultsAverage: () => LocalizedString;
  /**
   * Highest
   */
  voteResultsHighest: () => LocalizedString;
  /**
   * Finish Voting
   */
  votingFinish: () => LocalizedString;
  /**
   * Voting Locked
   */
  votingLocked: () => LocalizedString;
  /**
   * Restart Voting
   */
  votingRestart: () => LocalizedString;
  /**
   * {friendly|{false:Create Warrior, true:Create User}}
   */
  warriorCreate: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Invite a Warrior, true:Invite a Player}}
   */
  warriorInvite: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Nudge
   */
  warriorNudge: () => LocalizedString;
  /**
   * Works
   */
  works: () => LocalizedString;
  /**
   * Write a comment...
   */
  writeCommentPlaceholder: () => LocalizedString;
  /**
   * Yesterday
   */
  yesterday: () => LocalizedString;
  /**
   * Yesterday I...
   */
  yesterdayPlaceholder: () => LocalizedString;
  /**
   * Your Retros
   */
  yourRetros: () => LocalizedString;
  /**
   * Your Storyboards
   */
  yourStoryboards: () => LocalizedString;
  /**
   * {friendly|{false:Add Plan, true:Add Story}}
   */
  addPlan: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Enter a battle name, true:Enter a game name}}
   */
  battleNamePlaceholder: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * {friendly|{false:Auto Finish Voting when all Warriors have voted, true:Auto Finish Voting when all Players have voted}}
   */
  autoFinishVotingLabel: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  averageRoundingOptions: {
    /**
     * Ceil
     */
    ceil: () => LocalizedString;
    /**
     * Floor
     */
    floor: () => LocalizedString;
    /**
     * Round
     */
    round: () => LocalizedString;
  };
  /**
   * Create API Key
   */
  apiKeyCreateButton: () => LocalizedString;
  /**
   * Key Prefix
   */
  apiKeyPrefix: () => LocalizedString;
  /**
   * Last Updated
   */
  lastUpdated: () => LocalizedString;
  /**
   * Failed to get API keys
   */
  apiKeysErrorRetrieving: () => LocalizedString;
  /**
   * API Key deleted
   */
  apiKeyDeleteSuccess: () => LocalizedString;
  /**
   * Failed to delete API Key
   */
  apiKeyDeleteFailed: () => LocalizedString;
  /**
   * API Key updated
   */
  apiKeyUpdateSuccess: () => LocalizedString;
  /**
   * Failed to update API Key
   */
  apiKeyUpdateFailed: () => LocalizedString;
  /**
   * Deactivate
   */
  deactivate: () => LocalizedString;
  /**
   * Error getting your profile
   */
  profileErrorRetrieving: () => LocalizedString;
  /**
   * Error encountered updating your profile
   */
  profileErrorUpdating: () => LocalizedString;
  /**
   * Profile updated
   */
  profileUpdateSuccess: () => LocalizedString;
  /**
   * Password updated.
   */
  passwordUpdated: () => LocalizedString;
  /**
   * Error encountered attempting to update password
   */
  passwordUpdateError: () => LocalizedString;
  /**
   * Error encountered attempting to delete your account.
   */
  profileDeleteError: () => LocalizedString;
  /**
   * Your Profile
   */
  profileTitle: () => LocalizedString;
  /**
   * Update Password
   */
  updatePassword: () => LocalizedString;
  /**
   * Delete Account
   */
  deleteAccount: () => LocalizedString;
  /**
   * Are you sure you want to delete your account?
   */
  deleteAccountWarningStatement: () => LocalizedString;
  /**
   * Confirm Delete
   */
  deleteConfirmButton: () => LocalizedString;
  /**
   * Please enter a key name
   */
  apiKeyNameInvalid: () => LocalizedString;
  /**
   * New Api Key {keyName} created and {onlyNowOpen}it will be displayed only now{onlyNowClose}
   */
  apiKeyCreateSuccess: (arg: {
    keyName: unknown;
    onlyNowClose: unknown;
    onlyNowOpen: unknown;
  }) => LocalizedString;
  /**
   * Please store it somewhere safe because as soon as you navigate away from this page, we will not be able to retrieve or restore this generated token.
   */
  apiKeyStoreWarning: () => LocalizedString;
  /**
   * You have the max number of API keys allowed.
   */
  apiKeyLimitReached: () => LocalizedString;
  /**
   * Only verified registered users can create API keys.
   */
  apiKeyUnverifiedUser: () => LocalizedString;
  /**
   * Failed to create API Key
   */
  apiKeyCreateFailed: () => LocalizedString;
  /**
   * Key Name
   */
  apiKeyName: () => LocalizedString;
  /**
   * Enter a Key Name
   */
  apiKeyNamePlaceholder: () => LocalizedString;
  /**
   * Create
   */
  create: () => LocalizedString;
  /**
   * Close
   */
  close: () => LocalizedString;
  /**
   * Country
   */
  country: () => LocalizedString;
  /**
   * Company
   */
  company: () => LocalizedString;
  /**
   * Verified
   */
  verified: () => LocalizedString;
  /**
   * Registered Users
   */
  registeredUsers: () => LocalizedString;
  /**
   * {friendly|{false:My Battles, true:My Games}}
   */
  myBattles: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Create Battle, true:Create Game}}
   */
  createBattle: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  countPlansPointed: {
    /**
     * {totalPointed} of {totalPlans} stories pointed
     */
    true: (arg: {
      totalPlans: unknown;
      totalPointed: unknown;
    }) => LocalizedString;
    /**
     * {totalPointed} of {totalPlans} plans pointed
     */
    false: (arg: {
      totalPlans: unknown;
      totalPointed: unknown;
    }) => LocalizedString;
  };
  /**
   * {friendly|{false:Error finding your battles, true:Error finding your games}}
   */
  myBattlesError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  warriorJoined: {
    /**
     * {name} has joined the game
     */
    true: (arg: { name: unknown }) => LocalizedString;
    /**
     * {name} has joined the battle
     */
    false: (arg: { name: unknown }) => LocalizedString;
  };
  warriorRetreated: {
    /**
     * {name} has left the game
     */
    true: (arg: { name: unknown }) => LocalizedString;
    /**
     * {name} has retreated from the battle
     */
    false: (arg: { name: unknown }) => LocalizedString;
  };
  /**
   * {friendly|{false:Plan skipped, true:Story skipped}}
   */
  planSkipped: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {name} has voted
   */
  warriorVoted: (arg: { name: unknown }) => LocalizedString;
  /**
   * {name} has retracted vote
   */
  warriorRetractedVote: (arg: { name: unknown }) => LocalizedString;
  /**
   * {friendly|{false:Battle deleted, true:Game deleted}}
   */
  battleDeleted: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * pst... {name}, waiting on you to vote.
   */
  warriorNudgeMessage: (arg: { name: unknown }) => LocalizedString;
  /**
   * {friendly|{false:Battle, true:Game}}
   */
  battle: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Warriors, true:Players}}
   */
  warriors: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Ooops reloading Battle Plans..., true:Ooops reloading Game...}}
   */
  battleSocketReconnecting: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * {friendly|{false:Error joining battle refresh and try again., true:Error joining game refresh and try again.}}
   */
  battleSocketError: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * {friendly|{false:Loading Battle Plans..., true:Loading Game...}}
   */
  battleLoading: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Voting not started
   */
  votingNotStarted: () => LocalizedString;
  /**
   * Password
   */
  password: () => LocalizedString;
  /**
   * Enter a password
   */
  passwordPlaceholder: () => LocalizedString;
  /**
   * Enter your password
   */
  yourPasswordPlaceholder: () => LocalizedString;
  /**
   * Confirm Password
   */
  confirmPassword: () => LocalizedString;
  /**
   * Confirm your password
   */
  confirmPasswordPlaceholder: () => LocalizedString;
  /**
   * Update
   */
  update: () => LocalizedString;
  /**
   * Reset
   */
  reset: () => LocalizedString;
  /**
   * Error encountered attempting to reset password
   */
  passwordResetError: () => LocalizedString;
  /**
   * Reset Password
   */
  resetPassword: () => LocalizedString;
  /**
   * Forgot Password?
   */
  forgotPasswordCheckboxLabel: () => LocalizedString;
  /**
   * Register as Guest
   */
  registerAsGuest: () => LocalizedString;
  /**
   * Registration is disabled.
   */
  registrationDisabled: () => LocalizedString;
  /**
   * Enter your name
   */
  userNamePlaceholder: () => LocalizedString;
  /**
   * Error encountered trying to register as guest
   */
  guestRegisterError: () => LocalizedString;
  /**
   * Error encountered trying to register account
   */
  registerError: () => LocalizedString;
  /**
   * Enlist to Battle
   */
  enlistToBattle: () => LocalizedString;
  loginForBattle: {
    /**
     * or {loginOpen}Login{loginClose} to join the Game
     */
    true: (arg: { loginClose: unknown; loginOpen: unknown }) => LocalizedString;
    /**
     * or {loginOpen}Login{loginClose} to join the Battle
     */
    false: (arg: {
      loginClose: unknown;
      loginOpen: unknown;
    }) => LocalizedString;
  };
  /**
   * Enter your name
   */
  yourNamePlaceholder: () => LocalizedString;
  /**
   * Create an Account {optionalOpen}(optional){optionalClose}
   */
  createAccountFormTitle: (arg: {
    optionalClose: unknown;
    optionalOpen: unknown;
  }) => LocalizedString;
  /**
   * Password reset instructions sent to {email}
   */
  sendResetPasswordSuccess: (arg: { email: unknown }) => LocalizedString;
  /**
   * Error encountered attempting to send password reset
   */
  sendResetPasswordError: () => LocalizedString;
  registerForBattle: {
    /**
     * or {registerOpen}Register{registerClose} to join the Game
     */
    true: (arg: {
      registerClose: unknown;
      registerOpen: unknown;
    }) => LocalizedString;
    /**
     * or {registerOpen}Register{registerClose} to join the Battle
     */
    false: (arg: {
      registerClose: unknown;
      registerOpen: unknown;
    }) => LocalizedString;
  };
  /**
   * Choose your country (optional)
   */
  chooseCountryPlaceholder: () => LocalizedString;
  /**
   * Locale
   */
  locale: () => LocalizedString;
  /**
   * Enter your company (optional)
   */
  companyPlaceholder: () => LocalizedString;
  /**
   * Job Title
   */
  jobTitle: () => LocalizedString;
  /**
   * Enter your job title (optional)
   */
  jobTitlePlaceholder: () => LocalizedString;
  /**
   * {friendly|{false:Enable battle notifications, true:Enable game notifications}}
   */
  enableBattleNotifications: (arg: {
    friendly: 'false' | 'true';
  }) => LocalizedString;
  /**
   * Avatar
   */
  avatar: () => LocalizedString;
  /**
   * Update Profile
   */
  updateProfile: () => LocalizedString;
  /**
   * Guest Users
   */
  guestUsers: () => LocalizedString;
  /**
   * Maintenance
   */
  maintenance: () => LocalizedString;
  /**
   * Clean Guests older than {daysOld} days
   */
  cleanGuests: (arg: { daysOld: unknown }) => LocalizedString;
  cleanBattles: {
    /**
     * Clean Games older than {daysOld} days
     */
    true: (arg: { daysOld: unknown }) => LocalizedString;
    /**
     * Clean Battles older than {daysOld} days
     */
    false: (arg: { daysOld: unknown }) => LocalizedString;
  };
  /**
   * Choose your preferred locale (optional)
   */
  chooseLocalePlaceholder: () => LocalizedString;
  /**
   * {friendly|{false:Import Plans, true:Import Stories}}
   */
  importPlans: (arg: { friendly: 'false' | 'true' }) => LocalizedString;
  /**
   * Select file...
   */
  selectFile: () => LocalizedString;
};

export type Formatters = {};
