ALTER TABLE ONLY team_checkin ALTER COLUMN id SET DEFAULT gen_random_uuid();
ALTER TABLE ONLY team_checkin_comment ALTER COLUMN id SET DEFAULT gen_random_uuid();
DROP EXTENSION "uuid-ossp";

DROP PROCEDURE delete_user(IN userid uuid);
DROP PROCEDURE clean_guest_users(IN daysold integer);
DROP PROCEDURE user_account_update(IN userid uuid, IN username character varying, IN useremail character varying, IN useravatar character varying, IN notificationsenabled boolean, IN usercountry character varying, IN userlocale character varying, IN usercompany character varying, IN userjobtitle character varying);
DROP PROCEDURE user_profile_ldap_update(IN userid uuid, IN useravatar character varying, IN notificationsenabled boolean, IN usercountry character varying, IN userlocale character varying, IN usercompany character varying, IN userjobtitle character varying);
DROP FUNCTION apikeys_list(l_limit integer, l_offset integer);
DROP PROCEDURE clean_battles(IN daysold integer);
DROP PROCEDURE clean_retros(IN daysold integer);
DROP PROCEDURE clean_storyboards(IN daysold integer);
DROP FUNCTION countries_active();
DROP FUNCTION IF EXISTS create_battle(leaderid uuid, battlename character varying, pointsallowed jsonb, autovoting boolean, pointaveragerounding character varying, joincode character varying, leadercode character varying, OUT battleid uuid);
DROP FUNCTION IF EXISTS create_retro(userid uuid, retroname character varying, fmt character varying, joincode character varying, maxvotes smallint, brainstormvisibility character varying);
DROP FUNCTION IF EXISTS create_storyboard(ownerid uuid, storyboardname character varying, joincode character varying);
DROP PROCEDURE IF EXISTS create_plan(IN battleid uuid, IN planname character varying, IN plantype character varying, IN referenceid character varying, IN planlink text, IN plandescription text, IN acceptancecriteria text);
DROP PROCEDURE delete_battle(IN battleid uuid);
DROP PROCEDURE delete_retro(IN retroid uuid);
DROP PROCEDURE delete_storyboard(IN storyboardid uuid);
DROP PROCEDURE demote_user(IN userid uuid);
DROP FUNCTION department_get_by_id(departmentid uuid);
DROP FUNCTION department_list(orgid uuid, l_limit integer, l_offset integer);
DROP FUNCTION department_get_user_role(userid uuid, orgid uuid, departmentid uuid);
DROP FUNCTION department_team_list(departmentid uuid, l_limit integer, l_offset integer);
DROP FUNCTION department_team_user_role(userid uuid, orgid uuid, departmentid uuid, teamid uuid);
DROP FUNCTION department_user_list(departmentid uuid, l_limit integer, l_offset integer);
DROP PROCEDURE edit_retro(IN retroid uuid, IN retroname character varying, IN joincode text, IN facilitatorcode text, IN maxvotes smallint, IN brainstormvisibility character varying);
DROP PROCEDURE IF EXISTS edit_retro(IN retroid uuid, IN retroname character varying, IN joincode character varying, IN maxvotes smallint, IN brainstormvisibility character varying);
DROP PROCEDURE edit_storyboard(IN storyboardid uuid, IN storyboardname character varying, IN joincode text, IN facilitatorcode text);
DROP PROCEDURE IF EXISTS edit_storyboard(IN storyboardid uuid, IN storyboardname character varying, IN joincode character varying);
DROP FUNCTION get_retro_user(retroid uuid, userid uuid);
DROP FUNCTION get_retro_users(retroid uuid);
DROP FUNCTION get_retros_by_user(userid uuid);
DROP FUNCTION get_storyboard_personas(storyboardid uuid);
DROP FUNCTION get_storyboard_user(storyboardid uuid, userid uuid);
DROP FUNCTION get_storyboard_users(storyboardid uuid);
DROP FUNCTION get_storyboards_by_user(userid uuid);
DROP FUNCTION lowercase_unique_user_emails();
DROP FUNCTION organization_get_by_id(orgid uuid);
DROP FUNCTION organization_get_user_role(userid uuid, orgid uuid, OUT role character varying);
DROP FUNCTION organization_list(l_limit integer, l_offset integer);
DROP FUNCTION organization_list_by_user(userid uuid, l_limit integer, l_offset integer);
DROP FUNCTION organization_team_list(orgid uuid, l_limit integer, l_offset integer);
DROP FUNCTION organization_team_user_role(userid uuid, orgid uuid, teamid uuid);
DROP FUNCTION organization_user_add(orgid uuid, userid uuid, userrole character varying);
DROP FUNCTION organization_user_list(orgid uuid, l_limit integer, l_offset integer);
DROP PROCEDURE promote_user(IN userid uuid);
DROP PROCEDURE promote_user_by_email(IN useremail character varying);
DROP FUNCTION registered_users_list(l_limit integer, l_offset integer);
DROP PROCEDURE revise_color_legend(IN storyboardid uuid, IN colorlegend jsonb);
DROP PROCEDURE IF EXISTS revise_plan(IN planid uuid, IN planname character varying, IN plantype character varying, IN referenceid character varying, IN planlink text, IN plandescription text, IN acceptancecriteria text);
DROP PROCEDURE set_retro_phase(IN retroid uuid, IN nextphase character varying);
DROP FUNCTION team_battle_list(teamid uuid, l_limit integer, l_offset integer);
DROP FUNCTION team_get_by_id(teamid uuid);
DROP FUNCTION team_get_user_role(userid uuid, teamid uuid);
DROP FUNCTION team_list(l_limit integer, l_offset integer);
DROP FUNCTION team_list_by_user(userid uuid, l_limit integer, l_offset integer);
DROP FUNCTION team_list_count(OUT count integer);
DROP FUNCTION team_retro_list(teamid uuid, l_limit integer, l_offset integer);
DROP FUNCTION team_storyboard_list(teamid uuid, l_limit integer, l_offset integer);
DROP FUNCTION team_user_list(teamid uuid, l_limit integer, l_offset integer);
DROP PROCEDURE update_user_password(IN userid uuid, IN userpassword text);
DROP PROCEDURE user_enable(IN userid uuid);
DROP FUNCTION user_session_get(sessionid character varying);
DROP PROCEDURE create_plan(IN battleid uuid, IN planname character varying, IN plantype character varying, IN referenceid character varying, IN planlink text, IN plandescription text, IN acceptancecriteria text, IN planpriority integer);
DROP PROCEDURE demote_battle_leader(IN battleid uuid, IN leaderid uuid);
DROP PROCEDURE revise_plan(IN planid uuid, IN planname character varying, IN plantype character varying, IN referenceid character varying, IN planlink text, IN plandescription text, IN acceptancecriteria text, IN planpriority integer);
DROP PROCEDURE set_battle_leader(IN battleid uuid, IN leaderid uuid);
DROP FUNCTION team_battle_add(teamid uuid, battleid uuid);
DROP FUNCTION team_battle_remove(teamid uuid, battleid uuid);
DROP FUNCTION team_retro_add(teamid uuid, retroid uuid);
DROP FUNCTION team_retro_remove(teamid uuid, retroid uuid);
DROP FUNCTION team_storyboard_add(teamid uuid, storyboardid uuid);
DROP FUNCTION team_storyboard_remove(teamid uuid, storyboardid uuid);
DROP FUNCTION team_user_add(teamid uuid, userid uuid, userrole character varying);
DROP PROCEDURE team_user_remove(IN teamid uuid, IN userid uuid);
DROP PROCEDURE create_storyboard_column(IN storyboardid uuid, IN goalid uuid);
DROP PROCEDURE create_storyboard_goal(IN storyboardid uuid, IN goalname character varying);
DROP PROCEDURE create_storyboard_story(IN storyboardid uuid, IN goalid uuid, IN columnid uuid);
DROP PROCEDURE persona_add(IN storyboardid uuid, IN personaname character varying, IN personarole character varying, IN personadescription text);
DROP PROCEDURE persona_delete(IN storyboardid uuid, IN personaid uuid);
DROP PROCEDURE persona_edit(IN storyboardid uuid, IN personaid uuid, IN personaname character varying, IN personarole character varying, IN personadescription text);
DROP PROCEDURE retro_action_assignee_add(IN retroid uuid, IN actionid uuid, IN userid uuid);
DROP PROCEDURE retro_action_assignee_delete(IN retroid uuid, IN actionid uuid, IN userid uuid);
DROP PROCEDURE retro_action_comment_add(IN retroid uuid, IN actionid uuid, IN userid uuid, IN actioncomment text);
DROP PROCEDURE retro_action_comment_edit(IN retroid uuid, IN actionid uuid, IN commentid uuid, IN actioncomment text);
DROP PROCEDURE retro_action_comment_delete(IN retroid uuid, IN actionid uuid, IN commentid uuid);
DROP PROCEDURE retro_add_facilitator(IN retroid uuid, IN userid uuid);
DROP PROCEDURE retro_remove_facilitator(IN retroid uuid, IN userid uuid);
DROP PROCEDURE revise_storyboard_column(IN storyboardid uuid, IN columnid uuid, IN columnname character varying);
DROP PROCEDURE sb_column_persona_add(IN storyboardid uuid, IN columnid uuid, IN personaid uuid);
DROP PROCEDURE sb_column_persona_remove(IN storyboardid uuid, IN columnid uuid, IN personaid uuid);
DROP PROCEDURE sb_facilitator_add(IN storyboardid uuid, IN userid uuid);
DROP PROCEDURE sb_facilitator_remove(IN storyboardid uuid, IN userid uuid);
DROP PROCEDURE sb_goal_persona_add(IN storyboardid uuid, IN goalid uuid, IN personaid uuid);
DROP PROCEDURE sb_goal_persona_remove(IN storyboardid uuid, IN goalid uuid, IN personaid uuid);
DROP PROCEDURE sb_story_annotations_edit(IN storyid uuid, IN updatedannotations jsonb);
DROP PROCEDURE sb_story_link_edit(IN storyid uuid, IN updatedlink text);
DROP PROCEDURE story_comment_add(IN storyboardid uuid, IN storyid uuid, IN userid uuid, IN comment text);
DROP PROCEDURE story_comment_edit(IN storyboardid uuid, IN commentid uuid, IN updatedcomment text);
DROP PROCEDURE story_comment_delete(IN storyboardid uuid, IN commentid uuid);
DROP PROCEDURE update_story_closed(IN storyid uuid, IN isclosed boolean);
DROP PROCEDURE update_story_color(IN storyid uuid, IN storycolor character varying);
DROP PROCEDURE update_story_content(IN storyid uuid, IN storycontent text);
DROP PROCEDURE update_story_name(IN storyid uuid, IN storyname character varying);
DROP PROCEDURE update_story_points(IN storyid uuid, IN updatedpoints integer);
DROP PROCEDURE update_storyboard_goal(IN goalid uuid, IN goalname character varying);
DROP FUNCTION user_apikey_add(apikeyid text, keyname character varying, userid uuid, OUT createddate timestamp without time zone);
DROP PROCEDURE user_apikey_delete(IN apikeyid text, IN userid uuid);
DROP PROCEDURE user_apikey_update(IN apikeyid text, IN userid uuid, IN keyactive boolean);
DROP PROCEDURE user_profile_update(IN userid uuid, IN username character varying, IN useravatar character varying, IN notificationsenabled boolean, IN usercountry character varying, IN userlocale character varying, IN usercompany character varying, IN userjobtitle character varying);
